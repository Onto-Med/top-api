openapi: 3.0.0
info:
  title: TOP API
  version: 0.7.3
  description: 'API to manage phenotypes, repositories, ontologies and organisations and to execute phenotypic queries.'
servers:
  - url: 'https://top.imise.uni-leipzig.de/api'
    description: Public demo server.
  - url: 'http://localhost:8080'
    description: Local development instance.
  - url: 'http://host.docker.internal:8080'
    description: In case the server is running on the Docker host.
paths:
  /metadata:
    get:
      operationId: getMetadata
      summary: Get OpenAPI description of this API.
      responses:
        '200':
          description: API metadata
          content:
            text/plain:
              schema:
                type: string
      security:
        - BearerAuth: []
        - BasicAuth: []
  /ping:
    get:
      operationId: ping
      summary: Checks if the server is running.
      responses:
        '200':
          description: Server is up and running.
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - BearerAuth: []
        - BasicAuth: []
  /statistic:
    summary: Get statistics about available content. Returned data may be cached.
    get:
      operationId: getStatistics
      responses:
        '200':
          description: Object holding statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - BearerAuth: []
        - BasicAuth: []
  /document:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getDocuments
      summary: Searches for documents.
      parameters:
        - name: phraseText
          in: query
          description: Filter document by containing phrase.
          schema:
            type: string
        - name: conceptText
          in: query
          description: Filter document by containing concept.
          schema:
            type: string
        - name: phraseId
          in: query
          description: Filter document by containing phrase id.
          schema:
            type: string
        - name: conceptId
          in: query
          description: Filter document by containing concept id.
          schema:
            type: string
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/concept/{conceptId}':
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
    get:
      operationId: getDocumentsByConceptIds
      summary: Searches for documents from specific concept clusters. Use the query parameters to filter the result.
      parameters:
        - name: idOnly
          in: query
          schema:
            type: boolean
            default: true
        - name: gatheringMode
          in: query
          schema:
            type: string
            default: exclusive
        - name: name
          in: query
          description: Filter documents by name.
          schema:
            type: string
      responses:
        '200':
          description: List of documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/phrase/{phraseId}':
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getDocumentByPhraseId
      summary: Searches for documents that contain a specific phrase. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter documents by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/DocumentPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/{documentId}':
    summary: Represents a document
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getDocumentById
      summary: Returns a particular document
      responses:
        '200':
          description: Details of the Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  /phrase:
    get:
      operationId: getPhrases
      summary: Searches for phrases
      parameters:
        - name: text
          in: query
          description: Search phrase by text
          schema:
            type: string
        - name: conceptText
          in: query
          description: Search phrase by concept text
          schema:
            type: string
      responses:
        '200':
          description: List of phrases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phrase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/concept/{conceptId}':
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhraseByConceptId
      summary: Searches for phrases that are contained in a specific concept. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phrases by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/PhrasePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/document/{documentId}':
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhraseByDocumentId
      summary: Searches for phrases that are contained in a specific document. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phrases by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/PhrasePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/{phraseId}':
    summary: Represents a Phrase
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhraseById
      summary: Returns a particular Phrase
      responses:
        '200':
          description: Details of the Phrase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phrase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  /concept:
    get:
      operationId: getConcepts
      summary: Searches for concepts
      parameters:
        - name: phraseText
          in: query
          description: Search concept by phrase
          schema:
            type: string
      responses:
        '200':
          description: List of concepts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Concept'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - concept
  '/concept/phrase/{phraseId}':
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptByPhraseId
      summary: Searches for concepts that contain a specific phrase. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter concepts by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/ConceptPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - concept
  '/concept/document/{documentId}':
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptByDocumentId
      summary: Searches for concepts that are contained in a specific document. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter concepts by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/ConceptPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - concept
  '/concept/{conceptId}':
    summary: Represents a concept
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptById
      summary: Returns a particular concept
      responses:
        '200':
          description: Details of the Concept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concept'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - concept
  /organisation:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOrganisations
      summary: Search for organisations. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter organisations by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/OrganisationPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    post:
      operationId: createOrganisation
      summary: Creates a new organisation.
      requestBody:
        description: Organisation details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '201':
          description: Created organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  /data_source:
    get:
      operationId: getDataSources
      summary: Returns all available and accessible data sources.
      responses:
        '200':
          description: List of data sources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - data_source
  '/{organisationId}':
    summary: Represents an organisation.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOrganisationById
      summary: Returns a particular organisation by ID.
      responses:
        '200':
          description: Details of the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    patch:
      operationId: updateOrganisationById
      summary: Updates a particular organisation by ID and returns the result.
      requestBody:
        description: Organisation details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '200':
          description: Details about the updated organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    delete:
      operationId: deleteOrganisationById
      summary: Deletes a particular organisation by ID.
      responses:
        '204':
          description: The organisation was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  /repository:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositories
      summary: Search for repositories. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter repositories by name.
          schema:
            type: string
        - name: primary
          in: query
          description: Filter repositories by primary state.
          schema:
            type: boolean
        - name: type
          in: query
          description: Filter repositories by type.
          schema:
            $ref: '#/components/schemas/RepositoryType'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/RepositoryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  /ontology:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOntologies
      summary: Search for ontologies. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter ontologies by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/OntologyPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
  /entity:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntities
      summary: |
        Search for entities (phenotypes, categories or concepts). Use the query parameters to filter the result.
        Only entities in primary repositories are returned.
      parameters:
        - name: name
          in: query
          description: Filter entities by name.
          schema:
            type: string
        - name: type
          in: query
          description: Filter entities by type.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EntityType'
        - name: dataType
          in: query
          description: Filter entities by data type.
          schema:
            $ref: '#/components/schemas/DataType'
        - name: itemType
          in: query
          description: Filter entities by item type.
          schema:
            $ref: '#/components/schemas/ItemType'
        - name: repositoryIds
          in: query
          description: Filter entities by repository IDs.
          schema:
            type: array
            items:
              type: string
        - name: includePrimary
          in: query
          description: |
            Include all primary repositories in search. You can use this option in conjunction
            with "repositoryIds" query parameter, which will add all primary repositories to the
            list of searched repositories.
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/EntityPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/repository':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositoriesByOrganisationId
      summary: Search for repositories in an organisation. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter repositories by name.
          schema:
            type: string
        - name: type
          in: query
          description: Filter repositories by type.
          schema:
            $ref: '#/components/schemas/RepositoryType'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/RepositoryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    post:
      operationId: createRepository
      summary: Creates new repository in organisation.
      requestBody:
        description: Repository details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      responses:
        '201':
          description: Created repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/membership':
    summary: Manage organisation memberships.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getOrganisationMemberships
      summary: Get all memberships of an organisation.
      responses:
        '200':
          description: List of memberships.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationMembership'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    post:
      operationId: createOrganisationMembership
      summary: Create or replace an organisation membership.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '201':
          description: Organisation membership has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    delete:
      operationId: deleteOrganisationMembership
      summary: Delete an organisation membership.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '204':
          description: Organisation membership has been deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  '/{organisationId}/{repositoryId}':
    summary: Represents a repository in an organisation.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositoryById
      summary: Returns a particular repository in an organisation.
      responses:
        '200':
          description: Details of the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    patch:
      operationId: updateRepositoryById
      summary: Updates a particular repository by ID in the organisation and returns the resulting repository.
      requestBody:
        description: Repository details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      responses:
        '200':
          description: Details about the updated repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    delete:
      operationId: deleteRepositoryById
      summary: Deletes a particular repository by ID in the organisation.
      responses:
        '204':
          description: The repository was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  /converter:
    get:
      operationId: getConverters
      summary: Query for available entity converters.
      parameters:
        - name: purpose
          in: query
          schema:
            $ref: '#/components/schemas/Purpose'
      responses:
        '200':
          description: List of available converters matching the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Converter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/{organisationId}/{repositoryId}/export':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: converter
        in: query
        description: The converter. You can query available converters via /converter?purpose=export.
        required: true
        schema:
          type: string
    get:
      operationId: exportRepository
      summary: Exports a repository with the specified converter.
      responses:
        '200':
          description: Export result.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/{repositoryId}/import':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: converter
        in: query
        description: The converter. You can query available converters via /converter?purpose=import.
        required: true
        schema:
          type: string
    post:
      operationId: importRepository
      summary: Imports data with the specified converter to a repository.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: Import was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/{repositoryId}/query':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getQueries
      summary: Returns a list of all queries for the specified repository.
      parameters:
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/QueryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
    post:
      operationId: enqueueQuery
      summary: |
        Enqueue a new query. You can get the query result with a GET request to the getQueryResult path. The ID property of the provided query object is used as identifier throughout the life-cycle of the query.
      requestBody:
        description: Details of the query to be enqueued.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '201':
          description: The query was enqueued successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}/{repositoryId}/query/{queryId}':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: queryId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getQueryResult
      summary: Returns the result of a particular query by ID.
      responses:
        '200':
          description: Details of the query result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
    delete:
      operationId: deleteQuery
      summary: Deletes a particular query by ID.
      responses:
        '204':
          description: The query was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}/{repositoryId}/ontology':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOntologiesByRepositoryId
      summary: Searches for ontologies in a repository. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter ontologies by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/OntologyPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
    post:
      operationId: createOntology
      summary: Creates a new ontology in a repository.
      requestBody:
        description: Ontology details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ontology'
      responses:
        '201':
          description: Created ontology.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
  '/{organisationId}/{repositoryId}/ontology/{ontologyId}/{version}':
    summary: Represents an ontology in a repository.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: ontologyId
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VersionNumber'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOntologyByName
      summary: Returns a particular ontology in a repository.
      responses:
        '200':
          description: Details of the ontology.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
    put:
      operationId: updateOntologyById
      summary: Updates a particular ontology by id in a repository and returns the result.
      requestBody:
        description: Ontology details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ontology'
      responses:
        '200':
          description: Details about the updated ontology.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
    patch:
      operationId: releaseOntology
      summary: Build a new release for the ontology.
      responses:
        '200':
          description: Details about the released ontology.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ontology'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
    delete:
      operationId: deleteOntologyById
      summary: Deletes a particular ontology by ID in a repository.
      responses:
        '204':
          description: The ontology was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - ontology
  '/{organisationId}/{repositoryId}/entity':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntitiesByRepositoryId
      summary: Search for phenotypes or categories. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phenotypes or categories by name.
          schema:
            type: string
        - name: type
          in: query
          description: Filter phenotypes or categories by type.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EntityType'
        - name: dataType
          in: query
          description: Filter phenotypes by data type.
          schema:
            $ref: '#/components/schemas/DataType'
        - name: itemType
          in: query
          description: Filter phenotypes by item type.
          schema:
            $ref: '#/components/schemas/ItemType'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/EntityPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    post:
      operationId: createEntity
      summary: Creates a new phenotype or category in a repository and returns the result.
      requestBody:
        description: Phenotype or category details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Details about the created phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/entity/bulk':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    post:
      operationId: bulkUploadEntities
      summary: Creates multiple new phenotypes or categories in a repository.
      requestBody:
        description: List of phenotypes or categories to be created.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Entity'
      responses:
        '201':
          description: Entities have been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/root':
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRootEntitiesByRepositoryId
      summary: Search for root phenotypes or categories. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phenotypes or categories by name.
          schema:
            type: string
        - name: type
          in: query
          description: Filter phenotypes or categories by type.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EntityType'
        - name: dataType
          in: query
          description: Filter phenotypes by data type.
          schema:
            $ref: '#/components/schemas/DataType'
        - name: itemType
          in: query
          description: Filter phenotypes by item type.
          schema:
            $ref: '#/components/schemas/ItemType'
      responses:
        '200':
          description: List of root entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{id}':
    summary: Represents an entity (i.e. phenotype or category) in a repository.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        description: Defaults to the latest version number.
        schema:
          $ref: '#/components/schemas/VersionNumber'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntityById
      summary: Returns a particular phenotype or category in a repository.
      responses:
        '200':
          description: Details of the phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    put:
      operationId: updateEntityById
      summary: Updates a particular phenotype or category by id in a repository and returns the result.
      requestBody:
        description: Phenotype or category details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Details about the updated phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    delete:
      operationId: deleteEntityById
      summary: Deletes a particular phenotype or category by ID in the repository. One can delete the whole entity or a version by specifying the version parameter. The current version of an entity cannot be deleted.
      responses:
        '204':
          description: The entity or version was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    patch:
      operationId: setCurrentEntityVersion
      summary: Reset the state of a particular phenotype or category to the specified version.
      parameters:
        - name: version
          in: query
          description: Defaults to the latest version number.
          required: true
          schema:
            $ref: '#/components/schemas/VersionNumber'
      responses:
        '200':
          description: The current version of the entity after performing the reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{id}/fork':
    summary: 'Manage forks of an entity. E.g. create new forks, list them and apply updates from origin.'
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getForks
      summary: 'Returns all forks of a particular entity and the originating class of the entity, if present.'
      responses:
        '200':
          description: Forking stats that contain a list of forked entities and the originating entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForkingStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - fork
    post:
      operationId: createFork
      summary: |
        Create a new fork from a particular entity. Updates to existing forks can be applied via forking instructions.
      parameters:
        - name: version
          in: query
          description: Defaults to the latest version number.
          schema:
            $ref: '#/components/schemas/VersionNumber'
      requestBody:
        description: Forking instructions like destination.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForkingInstruction'
      responses:
        '201':
          description: 'List of affected entities (i.e., entities created or updated in the destination repository).'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - fork
  '/{organisationId}/{repositoryId}/{id}/history':
    summary: Represents the version history of an entity (i.e. phenotype or category) in a repository.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntityVersionsById
      summary: Returns all versions of a particular phenotype or category in a repository.
      responses:
        '200':
          description: List of versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{id}/subclasses':
    summary: 'Represents subclasses (categories, abstract or restricted phenotypes) of an entity in a repository.'
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getSubclassesById
      summary: Returns all subclasses of a particular phenotype or category in the repository.
      responses:
        '200':
          description: List of subclasses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  /expression_function:
    parameters:
      - name: type
        in: query
        description: |
          Optional parameter to restrict the result set to a specific function type.
        schema:
          type: string
    get:
      operationId: getExpressionFunctions
      summary: Get all supported expression functions.
      responses:
        '200':
          description: List of supported expression functions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpressionFunction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - expression_function
  /expression_constant:
    get:
      operationId: getExpressionConstants
      summary: Get all supported expression constants.
      responses:
        '200':
          description: List of supported expression constants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Constant'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - expression_constant
  /user:
    summary: Represents users that can be members of organisations and have specific permissions.
    get:
      operationId: getUsers
      summary: Search for users by name or organisation membership.
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: organisationIds
          in: query
          description: 'The organisations to filter users for. If you provide an empty array or leave out this parameter, no organisation filter will be applied.'
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/UserPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - user
  '/user/{userId}':
    summary: Manage a specific user.
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getUserById
      summary: Get a user by ID.
      responses:
        '200':
          description: Details of the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - user
components:
  parameters:
    include:
      name: include
      description: This field has no purpose jet.
      in: header
      schema:
        type: array
        items:
          type: string
          pattern: ^\w*$
    page:
      name: page
      in: query
      description: 'The desired page, if the result set is paged.'
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
  schemas:
    Page:
      type: object
      properties:
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          concept: '#/components/responses/ConceptPage'
          document: '#/components/responses/DocumentPage'
          entity: '#/components/responses/EntityPage'
          ontology: '#/components/responses/OntologyPage'
          organisation: '#/components/responses/OrganisationPage'
          phrase: '#/components/responses/PhrasePage'
          query: '#/components/responses/QueryPage'
          repository: '#/components/responses/RepositoryPage'
          user: '#/components/responses/UserPage'
      required:
        - number
        - size
        - totalElements
        - totalPages
        - type
    ConceptPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Concept'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    DocumentPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Document'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    EntityPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    OntologyPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Ontology'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    OrganisationPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Organisation'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    PhrasePage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Phrase'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    QueryPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Query'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    RepositoryPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Repository'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    UserPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/User'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    Repository:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        primary:
          description: Determines whether this repository is a primary (aka. public) repository.
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        organisation:
          $ref: '#/components/schemas/Organisation'
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
      required:
        - id
    RepositoryType:
      description: |
        The type of a repository. It determines the content a repository can hold.
      type: string
      enum:
        - phenotype_repository
        - concept_repository
    Ontology:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        repository:
          $ref: '#/components/schemas/Repository'
        organisation:
          $ref: '#/components/schemas/Organisation'
      allOf:
        - $ref: '#/components/schemas/VersionedContent'
      required:
        - id
    Organisation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        superOrganisation:
          $ref: '#/components/schemas/Organisation'
      required:
        - id
    OrganisationMembership:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        organisation:
          $ref: '#/components/schemas/Organisation'
        permission:
          $ref: '#/components/schemas/Permission'
      required:
        - user
        - organisation
    Permission:
      type: string
      enum:
        - READ
        - WRITE
        - MANAGE
    Entity:
      description: Either category or phenotype.
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          type: string
        titles:
          description: There should only be one title per language.
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
        synonyms:
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
        codes:
          description: E.g. LOINC or ICD-10 codes.
          type: array
          items:
            $ref: '#/components/schemas/Code'
        repository:
          $ref: '#/components/schemas/Repository'
        equivalentEntities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
      allOf:
        - $ref: '#/components/schemas/VersionedContent'
      discriminator:
        propertyName: entityType
        mapping:
          category: '#/components/schemas/Category'
          single_phenotype: '#/components/schemas/Phenotype'
          composite_phenotype: '#/components/schemas/Phenotype'
          single_restriction: '#/components/schemas/Phenotype'
          composite_restriction: '#/components/schemas/Phenotype'
      required:
        - entityType
    Category:
      type: object
      properties:
        superCategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        subCategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        phenotypes:
          type: array
          items:
            $ref: '#/components/schemas/Phenotype'
      allOf:
        - $ref: '#/components/schemas/Entity'
    Phenotype:
      type: object
      properties:
        dataType:
          $ref: '#/components/schemas/DataType'
        itemType:
          $ref: '#/components/schemas/ItemType'
        restriction:
          $ref: '#/components/schemas/Restriction'
        expression:
          $ref: '#/components/schemas/Expression'
        unit:
          type: string
          minLength: 1
        superPhenotype:
          $ref: '#/components/schemas/Phenotype'
      allOf:
        - $ref: '#/components/schemas/Category'
    Constant:
      type: object
      properties:
        id:
          description: A unique identifier of the constant.
          type: string
        title:
          description: Human-readable title of the constant.
          type: string
        dataType:
          $ref: '#/components/schemas/DataType'
      discriminator:
        propertyName: dataType
        mapping:
          string: '#/components/schemas/StringConstant'
          number: '#/components/schemas/NumberConstant'
          date_time: '#/components/schemas/DateTimeConstant'
          boolean: '#/components/schemas/BooleanConstant'
      required:
        - id
        - dataType
    StringConstant:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: '#/components/schemas/Constant'
    NumberConstant:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: '#/components/schemas/Constant'
    DateTimeConstant:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Constant'
    BooleanConstant:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/Constant'
    Expression:
      type: object
      properties:
        functionId:
          description: ID of a valid expression function. See ExpressionFunction for a detailed description.
          type: string
        entityId:
          description: 'In case this expression holds an entity, this property contains the id of that entity.'
          type: string
        constantId:
          description: ID of a valid constant. See Constant for a detailed description.
          type: string
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
        restriction:
          $ref: '#/components/schemas/Restriction'
    ItemType:
      description: |
        Only relevant for single phenotypes. This property specifies the class of items the phenotype holding this property belongs to.
      type: string
      enum:
        - allergy_intolerance
        - clinical_impression
        - condition
        - medication_administration
        - medication_request
        - medication_statement
        - observation
        - procedure
        - subject_age
        - subject_birth_date
        - subject_sex
    User:
      properties:
        id:
          type: string
        username:
          type: string
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/Organisation'
      required:
        - id
    Value:
      properties:
        dataType:
          $ref: '#/components/schemas/DataType'
        dateTime:
          description: |
            This property is for internal use only and will be ignored, if sent to a server. This property specifies when a value has been observed.
          type: string
          format: x-local-date-time
      discriminator:
        propertyName: dataType
        mapping:
          string: '#/components/schemas/StringValue'
          number: '#/components/schemas/NumberValue'
          date_time: '#/components/schemas/DateTimeValue'
          boolean: '#/components/schemas/BooleanValue'
      required:
        - dataType
    StringValue:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: '#/components/schemas/Value'
    NumberValue:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: '#/components/schemas/Value'
    DateTimeValue:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Value'
    BooleanValue:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/Value'
    ExpressionFunction:
      type: object
      properties:
        id:
          description: The identifier of the function. Should be unique.
          type: string
          example: add
        title:
          description: Human-readable title of the function.
          type: string
          example: +
        type:
          description: The type of the function. This can be something like a scope in which the function can be used.
          type: string
          example: arithmetic
        notation:
          description: |
            This property defines the preferred notation of a function. If the property is missing or undefined, it should be treated as prefix.
          type: string
          default: prefix
          enum:
            - prefix
            - infix
            - postfix
        minArgumentNumber:
          description: |
            Determines how many arguments are at least required for this function. If this property is missing, the minimum argument number is unrestricted.
          type: integer
          format: int32
        maxArgumentNumber:
          description: |
            Determines how many arguments are allowed for this function at max. If this property is missing, the maximum argument number is unrestricted.
          type: integer
          format: int32
      required:
        - id
    ForkingInstruction:
      type: object
      properties:
        organisationId:
          description: Destination organisation where fork will be created.
          type: string
        repositoryId:
          description: Destination repository where fork will be created.
          type: string
        cascade:
          description: Whether all sub entities shall be forked too.
          type: boolean
          default: false
        update:
          description: Whether existing forks shall be updated to the newest version.
          type: boolean
          default: false
      required:
        - organisationId
        - repositoryId
    ForkingStats:
      type: object
      properties:
        origin:
          $ref: '#/components/schemas/Entity'
        forks:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
    VersionNumber:
      description: Reflects the version of the content. The value is generated server-side.
      type: integer
      format: int32
      minimum: 0
    EntityType:
      type: string
      enum:
        - category
        - single_phenotype
        - composite_phenotype
        - single_restriction
        - composite_restriction
    DataType:
      type: string
      enum:
        - string
        - number
        - boolean
        - date_time
    VersionedContent:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/VersionNumber'
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        refer:
          type: string
          format: uri
    LocalisableText:
      description: A text in a specific language.
      type: object
      properties:
        lang:
          description: ICU Locale code.
          type: string
          pattern: '^[a-z]{2}(-[A-Z\-]+)?$'
        text:
          description: The actual localised text.
          type: string
      required:
        - lang
        - text
    CodeSystem:
      type: object
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
      required:
        - uri
        - name
    Code:
      description: Code of a code system.
      type: object
      properties:
        codeSystem:
          $ref: '#/components/schemas/CodeSystem'
        code:
          type: string
        name:
          type: string
      required:
        - codeSystem
        - code
    Restriction:
      description: Represents restriction of an abstract phenotype.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DataType'
        quantifier:
          $ref: '#/components/schemas/Quantifier'
        cardinality:
          description: |
            This value can be used in combination with a quantifier to specify how many matches are required to fulfil this restriction.
          type: integer
          format: int32
          minimum: 0
      discriminator:
        propertyName: type
        mapping:
          string: '#/components/schemas/StringRestriction'
          number: '#/components/schemas/NumberRestriction'
          date_time: '#/components/schemas/DateTimeRestriction'
          boolean: '#/components/schemas/BooleanRestriction'
      required:
        - type
    StringRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/Restriction'
    BooleanRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: boolean
      allOf:
        - $ref: '#/components/schemas/Restriction'
    NumberRestriction:
      type: object
      properties:
        minOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        maxOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        values:
          description: |
            In case there are operators, the first two values are used as values for these operators. Convention: The first array item will always be treated as minimum and the second one as maximum. In case there is only a maximum value, the first array item is null.
          type: array
          items:
            type: number
      allOf:
        - $ref: '#/components/schemas/Restriction'
    DateTimeRestriction:
      type: object
      properties:
        minOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        maxOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        values:
          description: |
            In case there are operators, the first two values are used as values for these operators. Convention: The first array item will always be treated as minimum and the second one as maximum. In case there is only a maximum value, the first array item is null.
          type: array
          items:
            type: string
            format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Restriction'
    RestrictionOperator:
      type: string
      enum:
        - <
        - <=
        - '>'
        - '>='
    Quantifier:
      type: string
      enum:
        - all
        - exact
        - min
        - max
    Query:
      description: |
        Represents a search query for subjects/individuals. A query has basic configurations for data source connections as well as in/exclusions and projections.
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          description: |
            Name of this query. For example, you could allow users to save a query for later use and use the name as identifier.
          type: string
        dataSources:
          description: List of data source IDs.
          type: array
          items:
            type: string
        criteria:
          description: List of in- and exclusion criteria.
          type: array
          items:
            $ref: '#/components/schemas/QueryCriterion'
        projection:
          description: |
            The projection to be performed on the result set. This property holds an ordered list of subjects with sorting directions.
          type: array
          items:
            $ref: '#/components/schemas/ProjectionEntry'
        dependentSubjects:
          $ref: '#/components/schemas/DependentSubjectsMap'
      required:
        - id
    QueryResult:
      description: Result of a query. It might indicate that the query has not finished yet or has failed.
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        count:
          description: Total count of subjects in the query result.
          type: integer
          format: int64
        finishedAt:
          type: string
          format: date-time
        message:
          description: Optional message about the query or query result. (e.g. error message)
          type: string
        state:
          $ref: '#/components/schemas/QueryState'
      required:
        - id
        - createdAt
    QueryState:
      type: string
      enum:
        - failed
        - finished
        - queued
        - running
    DependentSubjectsMap:
      description: 'Map of additional subjects that hold information, required to execute the query.'
      type: object
      properties:
        id:
          description: ID of the dependent subject.
          type: string
      additionalProperties:
        $ref: '#/components/schemas/Phenotype'
      required:
        - id
    DataSource:
      description: A data source is a data storage (e.g. database) on which queries can be executed.
      type: object
      properties:
        id:
          description: ID of the data source.
          type: string
        title:
          description: Human-readable title of the data source.
          type: string
      required:
        - id
    ProjectionEntry:
      description: Single entry of a projection select list.
      type: object
      properties:
        subjectId:
          description: ID of a subject this projection entry refers to.
          type: string
        defaultAggregationFunctionId:
          description: |
            Multiple phenotype values in expressions must be aggregated to a single value in order to use them for calculations.
            The aggregation function provided via this property will be used as default aggregation function for cases where none has been set.
          type: string
        dateTimeRestriction:
          $ref: '#/components/schemas/DateTimeRestriction'
        type:
          type: string
          enum:
            - ProjectionEntry
            - QueryCriterion
      discriminator:
        propertyName: type
      required:
        - subjectId
        - type
    QueryCriterion:
      description: A single criterion of a search query. Criteria can be inclusions or exclusions.
      type: object
      properties:
        inclusion:
          type: boolean
          default: true
      allOf:
        - $ref: '#/components/schemas/ProjectionEntry'
      required:
        - inclusion
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
    Statistic:
      description: Holds statistics about content. The scope may be a subset of content stored on the server. Statistics may vary depending on user permissions.
      type: object
      properties:
        organisations:
          description: Number of organisations.
          type: integer
          format: int64
        repositories:
          description: Number of repositories.
          type: integer
          format: int64
        categories:
          description: Number of phenotype categories.
          type: integer
          format: int64
        phenotypes:
          description: Number of phenotypes.
          type: integer
          format: int64
        documents:
          description: Number of documents
          type: integer
          format: int64
    Document:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        phrases:
          type: array
          items:
            type: string
    Phrase:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        isExemplar:
          type: boolean
        attributes:
          type: array
          items:
            type: string
      required:
        - id
    Concept:
      type: object
      properties:
        id:
          type: string
        labels:
          type: string
      required:
        - id
    Purpose:
      type: string
      enum:
        - import
        - export
    Converter:
      type: object
      properties:
        id:
          type: string
        purpose:
          $ref: '#/components/schemas/Purpose'
        fileExtension:
          type: string
      required:
        - id
        - purpose
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: 'Unauthorized, Access token is missing or invalid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ConceptPageResponse:
      description: A page of concepts.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConceptPage'
    DocumentPageResponse:
      description: A page of documents.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentPage'
    EntityPageResponse:
      description: A page of entities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityPage'
    OntologyPageResponse:
      description: A page of ontologies.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OntologyPage'
    OrganisationPageResponse:
      description: A page of organisations.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganisationPage'
    PhrasePageResponse:
      description: A page of phrases.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PhrasePage'
    QueryPageResponse:
      description: A page of queries.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryPage'
    RepositoryPageResponse:
      description: A page of repositories.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RepositoryPage'
    UserPageResponse:
      description: A page of users.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPage'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic
security:
  - BearerAuth: []
  - BasicAuth: []
