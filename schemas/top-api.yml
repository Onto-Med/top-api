openapi: 3.0.0
info:
  title: TOP API
  version: 0.6.0
  description: API to manage phenotypes, repositories, ontologies and organisations

servers:
  - url: http://localhost:8080
  - url: http://host.docker.internal:8080
    description: In case the server is running on the Docker host

paths:
  /metadata:
    get:
      summary: OpenAPI description of this API
      operationId: getMetadata
      security:
        - BearerAuth: []
        - BasicAuth: []
      responses:
        200:
          description: API metadata
          content:
            text/plain:
              schema:
                type: string

  /ping:
    get:
      summary: Checks if the server is running
      operationId: ping
      security:
        - BearerAuth: []
        - BasicAuth: []
      responses:
        200:
          description: Server is up and running
        default:
          $ref: "#/components/responses/UnexpectedError"

  /statistic:
    summary: Get statistics about available content. Returned data may be cached.
    get:
      operationId: getStatistics
      security:
        - BearerAuth: []
        - BasicAuth: []
      responses:
        200:
          description: Object holding statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistic"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /document:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for documents
      operationId: getDocuments
      tags:
        - document
      parameters:
        - name: phraseText
          description: Filter document by containing phrase.
          in: query
          schema:
            type: string
        - name: conceptText
          description: Filter document by containing concept.
          in: query
          schema:
            type: string
        - name: phraseId
          description: Filter document by containing phrase id.
          in: query
          schema:
            type: string
        - name: conceptId
          description: Filter document by containing concept id.
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /document/concept/{conceptId}:
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: array
          items:
            type: string
    get:
      summary: Searches for documents from specific concept clusters. Use the query parameters to filter the result.
      operationId: getDocumentsByConceptIds
      tags:
        - document
      parameters:
        - name: idOnly
          in: query
          schema:
            type: boolean
            default: true
        - name: gatheringMode
          in: query
          schema:
            type: string
            default: exclusive
        - name: name
          description: Filter documents by name.
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /document/phrase/{phraseId}:
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for documents that contain a specific phrase. Use the query parameters to filter the result.
      operationId: getDocumentByPhraseId
      tags:
        - document
      parameters:
        - name: name
          description: Filter documents by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /document/{documentId}:
    summary: Represents a document
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular document
      operationId: getDocumentById
      tags:
        - document
      responses:
        200:
          description: Details of the Document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /phrase:
    get:
      summary: Searches for phrases
      operationId: getPhrases
      tags:
        - phrase
      parameters:
        - name: text
          description: Search phrase by text
          in: query
          schema:
            type: string
        - name: conceptText
          description: Search phrase by concept text
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of phrases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Phrase"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /phrase/concept/{conceptId}:
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phrases that are contained in a specific concept. Use the query parameters to filter the result.
      operationId: getPhraseByConceptId
      tags:
        - phrase
      parameters:
        - name: name
          description: Filter phrases by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phrases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Phrase"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /phrase/document/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phrases that are contained in a specific document. Use the query parameters to filter the result.
      operationId: getPhraseByDocumentId
      tags:
        - phrase
      parameters:
        - name: name
          description: Filter phrases by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phrases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Phrase"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /phrase/{phraseId}:
    summary: Represents a Phrase
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular Phrase
      operationId: getPhraseById
      tags:
        - phrase
      responses:
        200:
          description: Details of the Phrase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phrase"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /concept:
      get:
        summary: Searches for concepts
        operationId: getConcepts
        tags:
          - concept
        parameters:
          - name: phraseText
            description: Search concept by phrase
            in: query
            schema:
              type: string
        responses:
          200:
            description: List of concepts
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Concept"
          401:
            $ref: "#/components/responses/Unauthorized"
          default:
            $ref: "#/components/responses/UnexpectedError"

  /concept/phrase/{phraseId}:
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for concepts that contain a specific phrase. Use the query parameters to filter the result.
      operationId: getConceptByPhraseId
      tags:
        - concept
      parameters:
        - name: name
          description: Filter concepts by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of concepts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Concept"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /concept/document/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for concepts that are contained in a specific document. Use the query parameters to filter the result.
      operationId: getConceptByDocumentId
      tags:
        - concept
      parameters:
        - name: name
          description: Filter concepts by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of concepts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Concept"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /concept/{conceptId}:
    summary: Represents a concept
    parameters:
      - name: conceptId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular concept
      operationId: getConceptById
      tags:
        - concept
      responses:
        200:
          description: Details of the Concept
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Concept"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /organisation:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for organisations. Use the query parameters to filter the result.
      operationId: getOrganisations
      tags:
        - organisation
      parameters:
        - name: name
          description: Filter organisations by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new organisation
      operationId: createOrganisation
      tags:
        - organisation
      requestBody:
        description: Organisation details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        201:
          description: Created organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /data_source:
    get:
      summary: Returns a available and accessible data sources.
      operationId: getDataSources
      tags:
        - data_source
      responses:
        200:
          description: List of data sources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataSource"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}:
    summary: Represents an organisation
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular organisation
      operationId: getOrganisationById
      tags:
        - organisation
      responses:
        200:
          description: Details of the organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Updates a particular organisation by id and returns the result
      operationId: updateOrganisationById
      tags:
        - organisation
      requestBody:
        description: Organisation details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        200:
          description: Details about the updated organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular organisation by id and returns the deleted organisation
      operationId: deleteOrganisationById
      tags:
        - organisation
      responses:
        204:
          description: The organisation was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /repository:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for repositories. Use the query parameters to filter the result.
      operationId: getRepositories
      tags:
        - repository
      parameters:
        - name: name
          description: Filter repositories by name.
          in: query
          schema:
            type: string
        - name: primary
          description: Filter repositories by primary state.
          in: query
          schema:
            type: boolean
        - name: type
          description: Filter repositories by type.
          in: query
          schema:
            $ref: "#/components/schemas/RepositoryType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /ontology:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for ontologies. Use the query parameters to filter the result.
      operationId: getOntologies
      tags:
        - ontology
      parameters:
        - name: name
          description: Filter ontologies by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of ontologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /entity:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phenotypes or categories. Use the query parameters to filter the result. Only entities in primary repositories are returned.
      operationId: getEntities
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter phenotypes or categories by type.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntityType"
        - name: dataType
          description: Filter phenotypes or categories by data type
          in: query
          schema:
            $ref: "#/components/schemas/DataType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/repository:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for repositories in organisation. Use the query parameters to filter the result.
      operationId: getRepositoriesByOrganisationId
      tags:
        - repository
      parameters:
        - name: name
          description: Filter repositories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter repositories by type.
          in: query
          schema:
            $ref: "#/components/schemas/RepositoryType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new repository in organisation
      operationId: createRepository
      tags:
        - repository
      requestBody:
        description: Repository details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Repository"
      responses:
        201:
          description: Created repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}:
    summary: Represents a repository in an organisation
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular repository in organisation
      operationId: getRepositoryById
      tags:
        - repository
      responses:
        200:
          description: Details of the repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Updates a particular repository by id in the organisation and returns the resulting repository
      operationId: updateRepositoryById
      tags:
        - repository
      requestBody:
        description: Repository details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Repository"
      responses:
        200:
          description: Details about the updated repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular repository by id in the organisation and returns the deleted repository
      operationId: deleteRepositoryById
      tags:
        - repository
      responses:
        204:
          description: The repository was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/query:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Returns a list of all queries for the specified repository.
      operationId: getQueries
      tags:
        - query
      parameters:
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description:
            List of queries.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Query"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: >
        Enqueue a new query. You can get the query result with a GET request to the getQueryResult path.
        The id property of the provided query object is used as identifier throughout the life-cycle of the query.
      operationId: enqueueQuery
      tags:
        - query
      requestBody:
        description: Details of the query to be enqueued.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        201:
          description: The query was enqueued successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/query/{queryId}:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: queryId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Returns the result of a particular query by id.
      operationId: getQueryResult
      tags:
        - query
      responses:
        200:
          description: Details of the query result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular query by id.
      operationId: deleteQuery
      tags:
        - query
      responses:
        204:
          description: The query was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/ontology:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for ontologies in repository. Use the query parameters to filter the result.
      operationId: getOntologiesByRepositoryId
      tags:
        - ontology
      parameters:
        - name: name
          description: Filter ontologies by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of ontologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new ontology in repository
      operationId: createOntology
      tags:
        - ontology
      requestBody:
        description: Ontology details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ontology"
      responses:
        201:
          description: Created ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/ontology/{ontologyId}/{version}:
    summary: Represents an ontology in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: ontologyId
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/VersionNumber"
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular ontology in the repository
      operationId: getOntologyByName
      tags:
        - ontology
      responses:
        200:
          description: Details of the ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: Updates a particular ontology by id in the repository and returns the result
      operationId: updateOntologyById
      tags:
        - ontology
      requestBody:
        description: Ontology details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ontology"
      responses:
        200:
          description: Details about the updated ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Build a new release for the ontology
      operationId: releaseOntology
      tags:
        - ontology
      responses:
        200:
          description: Details about the released ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Deletes a particular ontology by id in the repository and returns the deleted ontology
      operationId: deleteOntologyById
      tags:
        - ontology
      responses:
        204:
          description: The ontology was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/entity:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phenotypes or categories. Use the query parameters to filter the result.
      operationId: getEntitiesByRepositoryId
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter phenotypes or categories by type.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntityType"
        - name: dataType
          description: Filter phenotypes or categories by data type
          in: query
          schema:
            $ref: "#/components/schemas/DataType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates a new phenotype or category in the repository and returns the result
      operationId: createEntity
      tags:
        - entity
      requestBody:
        description: Phenotype or category details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        200:
          description: Details about the created phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/root:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for root phenotypes or categories. Use the query parameters to filter the result.
      operationId: getRootEntitiesByRepositoryId
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter phenotypes or categories by type.
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntityType"
        - name: dataType
          description: Filter phenotypes or categories by data type
          in: query
          schema:
            $ref: "#/components/schemas/DataType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of root phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}:
    summary: Represents an entity (i.e. phenotype or category) in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Defaults to the latest version number.
        in: query
        schema:
          $ref: "#/components/schemas/VersionNumber"
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular phenotype or category in the repository
      operationId: getEntityById
      tags:
        - entity
      responses:
        200:
          description: Details of the phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: Updates a particular phenotype or category by id in the repository and returns the result
      operationId: updateEntityById
      tags:
        - entity
      requestBody:
        description: Phenotype or category details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        200:
          description: Details about the updated phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary:
        Deletes a particular phenotype or category by id in the repository.
        One can delete the whole entity or a version by specifying the version parameter.
        The current version of an entity cannot be deleted.
      operationId: deleteEntityById
      tags:
        - entity
      responses:
        204:
          description: The entity or version was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Reset the state of a particular phenotype or category to the specified version.
      operationId: setCurrentEntityVersion
      tags:
        - entity
      parameters:
        - name: version
          description: Defaults to the latest version number.
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/VersionNumber"
      responses:
        200:
          description: The current version of the entity after performing the reset.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/export:
    summary: Export entity in the requested format.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Defaults to the latest version number.
        in: query
        schema:
          $ref: "#/components/schemas/VersionNumber"
      - name: format
        description: The export format.
        in: query
        required: true
        schema:
          type: string
    get:
      operationId: exportEntity
      tags:
        - entity
      responses:
        200:
          description: The entity in the requested export format.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/fork:
    summary: Manage forks of an entity. E.g. create new forks, list them and apply updates from origin.
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns all forks of a particular entity and the originating class of the entity, if present.
      operationId: getForks
      tags:
        - fork
      responses:
        200:
          description: Forking stats that contain a list of forked entities and the originating entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForkingStats"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: >
        Create a new fork from a particular entity.
        Updates to existing forks can be applied via forking instructions.
      operationId: createFork
      tags:
        - fork
      parameters:
        - name: version
          description: Defaults to the latest version number.
          in: query
          schema:
            $ref: "#/components/schemas/VersionNumber"
      requestBody:
        description: Forking instructions like destination
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForkingInstruction"
      responses:
        201:
          description: List of affected entities (i.e., entities created in the destination repository).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/history:
    summary: Represents the version history of an entity (i.e. phenotype or category) in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns all versions of a particular phenotype or category in the repository
      operationId: getEntityVersionsById
      tags:
        - entity
      responses:
        200:
          description: List of versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/subclasses:
    summary: Represents subclasses (categories, abstract or restricted phenotypes) of an entity in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns all subclasses of a particular phenotype or category in the repository
      operationId: getSubclassesById
      tags:
        - entity
      responses:
        200:
          description: List of subclasses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /expression_function:
    parameters:
      - name: type
        in: query
        description: Optional parameter to restrict the result set to a specific function type (to be defined).
        schema:
          type: string
    get:
      summary: Get all supported expression functions
      operationId: getExpressionFunctions
      tags:
        - expression_function
      responses:
        200:
          description: List of supported expression functions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExpressionFunction"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /expression_constant:
    get:
      summary: Get all supported expression constants
      operationId: getExpressionConstants
      tags:
        - expression_constant
      responses:
        200:
          description: List of supported expression constants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Constant"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: Unauthorized, Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  parameters:
    page:
      name: page
      in: query
      description: The desired page, if the result set is paged.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1

    include:
      name: include
      description: This field has no purpose jet.
      in: header
      schema:
        type: array
        items:
          type: string
          pattern: '^\w*$'

  schemas:
    Repository:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        primary:
          description: Determines whether this repository is a primary (aka. public) repository
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        organisation:
          $ref: "#/components/schemas/Organisation"
        repositoryType:
          $ref: "#/components/schemas/RepositoryType"

    RepositoryType:
      type: string
      description: >
        The type of a repository. It determines the content a repository can hold.
      enum:
        - phenotype_repository
        - concept_repository

    Ontology:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        repository:
          $ref: "#/components/schemas/Repository"
        organisation:
          $ref: "#/components/schemas/Organisation"
      allOf:
        - $ref: "#/components/schemas/VersionedContent"

    Organisation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        superOrganisation:
          $ref: "#/components/schemas/Organisation"

    Entity:
      description: Either category or phenotype
      type: object
      required:
        - entityType
      properties:
        entityType:
          $ref: "#/components/schemas/EntityType"
        id:
          type: string
        titles:
          type: array
          description: There should only be one title per language
          items:
            $ref: "#/components/schemas/LocalisableText"
        synonyms:
          type: array
          items:
            $ref: "#/components/schemas/LocalisableText"
        descriptions:
          type: array
          items:
            $ref: "#/components/schemas/LocalisableText"
        index:
          type: integer
          format: int32
          minimum: 1
        codes:
          type: array
          items:
            $ref: "#/components/schemas/Code"
        repository:
          $ref: "#/components/schemas/Repository"
        equivalentEntities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
      allOf:
        - $ref: "#/components/schemas/VersionedContent"
      discriminator:
        propertyName: entityType
        mapping:
          category: "#/components/schemas/Category"
          single_phenotype: "#/components/schemas/Phenotype"
          composite_phenotype: "#/components/schemas/Phenotype"
          single_restriction: "#/components/schemas/Phenotype"
          composite_restriction: "#/components/schemas/Phenotype"

    Category:
      type: object
      properties:
        superCategories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        subCategories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        phenotypes:
          type: array
          items:
            $ref: "#/components/schemas/Phenotype"
      allOf:
        - $ref: "#/components/schemas/Entity"

    ItemType:
      type: string
      description: >
        Only relevant for single phenotypes.
        This property specifies the class of items the phenotype holding this property belongs to.
      enum:
        - allergy_intolerance
        - clinical_impression
        - condition
        - medication_administration
        - medication_request
        - medication_statement
        - observation
        - procedure
        - subject_age
        - subject_sex

    Phenotype:
      type: object
      properties:
        dataType:
          $ref: "#/components/schemas/DataType"
        itemType:
          $ref: "#/components/schemas/ItemType"
        restriction:
          $ref: "#/components/schemas/Restriction"
        expression:
          $ref: "#/components/schemas/Expression"
        unit:
          type: string
          minLength: 1
        superPhenotype:
          $ref: "#/components/schemas/Phenotype"
      allOf:
        - $ref: "#/components/schemas/Category"

    Constant:
      type: object
      required:
        - id
        - dataType
      properties:
        id:
          type: string
          description: A unique identifier of the constant.
        title:
          type: string
          description: Human-readable title of the constant.
        dataType:
          $ref: "#/components/schemas/DataType"
      discriminator:
        propertyName: dataType
        mapping:
          string: "#/components/schemas/StringConstant"
          number: "#/components/schemas/NumberConstant"
          date_time: "#/components/schemas/DateTimeConstant"
          boolean: "#/components/schemas/BooleanConstant"

    StringConstant:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: "#/components/schemas/Constant"

    NumberConstant:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: "#/components/schemas/Constant"

    DateTimeConstant:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: "#/components/schemas/Constant"

    BooleanConstant:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: "#/components/schemas/Constant"

    Expression:
      type: object
      properties:
        functionId:
          type: string
          description: ID of a valid expression function. See ExpressionFunction for a detailed description.
        entityId:
          type: string
          description: In case this expression holds an entity, this property contains the id of that entity.
        constantId:
          type: string
          description: ID of a valid constant. See Constant for a detailed description.
        value:
          $ref: "#/components/schemas/Value"
        arguments:
          type: array
          items:
            $ref: "#/components/schemas/Expression"
        values:
          type: array
          description: >
            This property is for internal use only and will be ignored, if sent to a backend.
            Items of this array property can hold results of function calls contained in expressions.
          items:
            $ref: "#/components/schemas/Value"
        restriction:
          description: >
            This property is for internal use only and will be ignored, if sent to a backend.
            Restrictions can be stored in this property to simplify the construction of phenotypic queries.
          $ref: "#/components/schemas/Restriction"

    Value:
      required:
        - dataType
      properties:
        dataType:
          $ref: "#/components/schemas/DataType"
        dateTime:
          description: >
            This property is for internal use only and will be ignored, if sent to a backend.
            This property specifies when a value has been observed.
          type: string
          format: x-local-date-time
      discriminator:
        propertyName: dataType
        mapping:
          string: "#/components/schemas/StringValue"
          number: "#/components/schemas/NumberValue"
          date_time: "#/components/schemas/DateTimeValue"
          boolean: "#/components/schemas/BooleanValue"

    StringValue:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: "#/components/schemas/Value"

    NumberValue:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: "#/components/schemas/Value"

    DateTimeValue:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: "#/components/schemas/Value"

    BooleanValue:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: "#/components/schemas/Value"

    ExpressionFunction:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The identifier of the function. Should be unique.
          example: add
        title:
          type: string
          description: Human-readable title of the function.
          example: +
        notation:
          type: string
          enum:
            - prefix
            - infix
            - postfix
          default: prefix
          description: >
            This property defines the preferred notation of a function.
            If the property is missing or undefined, it should be treated as prefix.
        minArgumentNumber:
          type: integer
          format: int32
          description: >
            Determines how many arguments are at least required for this function.
            If this property is missing, the minimum argument number is unrestricted.
        maxArgumentNumber:
          type: integer
          format: int32
          description: >
            Determines how many arguments are allowed for this function at max.
            If this property is missing, the maximum argument number is unrestricted.

    ForkingInstruction:
      type: object
      required:
        - organisationId
        - repositoryId
      properties:
        organisationId:
          type: string
          description: Destination organisation where fork will be created.
        repositoryId:
          type: string
          description: Destination repository where fork will be created.
        cascade:
          type: boolean
          default: false
          description: Whether all sub entities shall be forked too.
        update:
          type: boolean
          default: false
          description: Whether existing forks shall be updated to the newest version.

    ForkingStats:
      type: object
      properties:
        origin:
          $ref: "#/components/schemas/Entity"
        forks:
          type: array
          items:
            $ref: "#/components/schemas/Entity"

    VersionNumber:
      description: Reflects the version of the content. The value is generated server-side.
      type: integer
      format: int32
      minimum: 0

    EntityType:
      type: string
      enum:
        - category
        - single_phenotype
        - composite_phenotype
        - single_restriction
        - composite_restriction

    DataType:
      type: string
      enum: [string, number, boolean, date_time]

    VersionedContent:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/VersionNumber"
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        refer:
          type: string
          format: uri

    LocalisableText:
      description: A text in a specific language
      type: object
      required:
        - lang
        - text
      properties:
        lang:
          description: ICU Locale code
          type: string
          pattern: '^[a-z]{2}(-[A-Z\-]+)?$'
        text:
          description: The actual localised text
          type: string

    CodeSystem:
      type: object
      required:
        - uri
        - name
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string

    Code:
      description: Code of a code system
      type: object
      required:
        - codeSystem
        - code
      properties:
        codeSystem:
          $ref: "#/components/schemas/CodeSystem"
        code:
          type: string
        name:
          type: string

    Restriction:
      description: Represents restriction of an abstract phenotype
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/DataType"
        quantifier:
          $ref: "#/components/schemas/Quantifier"
        cardinality:
          description: This value can be used in combination with a quantifier to specify how many matches are required to fulfil this restriction.
          type: integer
          format: int32
          minimum: 0
      discriminator:
        propertyName: type
        mapping:
          string: "#/components/schemas/StringRestriction"
          number: "#/components/schemas/NumberRestriction"
          date_time: "#/components/schemas/DateTimeRestriction"
          boolean: "#/components/schemas/BooleanRestriction"

    StringRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      allOf:
        - $ref: "#/components/schemas/Restriction"

    BooleanRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: boolean
      allOf:
        - $ref: "#/components/schemas/Restriction"

    NumberRestriction:
      type: object
      properties:
        minOperator:
          $ref: "#/components/schemas/RestrictionOperator"
        maxOperator:
          $ref: "#/components/schemas/RestrictionOperator"
        values:
          type: array
          description: In case there are operators, the first two values are used as values for those operators
          items:
            type: number
      allOf:
        - $ref: "#/components/schemas/Restriction"

    DateTimeRestriction:
      type: object
      properties:
        minOperator:
          $ref: "#/components/schemas/RestrictionOperator"
        maxOperator:
          $ref: "#/components/schemas/RestrictionOperator"
        values:
          type: array
          description: In case there are operators, the first two values are used as values for those operators
          items:
            type: string
            format: x-local-date-time
      allOf:
        - $ref: "#/components/schemas/Restriction"

    RestrictionOperator:
      type: string
      enum: ["<", "<=", ">", ">="]

    Quantifier:
      type: string
      enum:
        - all
        - exact
        - min
        - max

    Query:
      description: >
        Represents a search query for subjects/individuals.
        A query has basic configurations for data source connections as well as in/exclusions and projections.
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          description: Name of this query. For example, you could allow users to save a query for later use and use the name as identifier.
          type: string
        dataSources:
          type: array
          items:
            $ref: "#/components/schemas/DataSource"
        criteria:
          description: List of in- and exclusion criteria.
          type: array
          items:
            $ref: "#/components/schemas/QueryCriterion"
        projection:
          description: >
            The projection to be performed on the result set.
            This property holds an ordered list of subjects with sorting directions.
          type: array
          items:
            $ref: "#/components/schemas/ProjectionEntry"
        dependentSubjects:
          $ref: "#/components/schemas/DependentSubjectsMap"

    QueryResult:
      description: Result of a query. It might indicate that the query has not finished yet or has failed.
      type: object
      required:
        - id
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        count:
          description: Total count of subjects in the query result.
          type: integer
          format: int64
        finishedAt:
          type: string
          format: date-time
        message:
          description: Optional message about the query or query result. (e.g. error message)
          type: string
        state:
          $ref: "#/components/schemas/QueryState"

    QueryState:
      type: string
      enum:
        - failed
        - finished
        - queued
        - running

    DependentSubjectsMap:
      description: Map of additional subjects that hold information, required to execute the query.
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID of the dependent subject.
      additionalProperties:
        $ref: "#/components/schemas/Phenotype"

    DataSource:
      description: A data source is a data storage (e.g. database) on which queries can be executed.
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: ID of the data source.
        title:
          type: string
          description: Human-readable title of the data source.

    QueryCriterion:
      description: A single criterion of a search query. Criteria can be inclusions or exclusions.
      type: object
      required:
        - subjectId
        - inclusion
        - defaultAggregationFunction
      properties:
        subjectId:
          type: string
          description: ID of the subject this criterion refers to.
        inclusion:
          type: boolean
          default: true
        defaultAggregationFunctionId:
          type: string
          description: >
            Multiple phenotype values in expressions must be aggregated to a single value in order to use them for calculations.
            The aggregation function provided via this property will be used as default aggregation function for cases where none has been set.
        dateTimeRestriction:
          $ref: "#/components/schemas/DateTimeRestriction"

    ProjectionEntry:
      description: Single entry of a projection select list.
      type: object
      required:
        - subjectId
        - sorting
      properties:
        subjectId:
          type: string
          description: ID of a subject this projection entry refers to.
        sorting:
          $ref: "#/components/schemas/Sorting"
        dateTimeRestriction:
          $ref: "#/components/schemas/DateTimeRestriction"

    Sorting:
      type: string
      enum:
        - asc
        - desc

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Statistic:
      description:
        Holds statistics about content. The scope may be a subset of content stored on the server.
        Statistics may vary depending on user permissions.
      type: object
      properties:
        organisations:
          description: Number of organisations
          type: integer
          format: int64
        repositories:
          description: Number of repositories
          type: integer
          format: int64
        categories:
          description: Number of phenotype categories
          type: integer
          format: int64
        phenotypes:
          description: Number of phenotypes
          type: integer
          format: int64
        documents:
          description: Number of documents
          type: integer
          format: int64

    Document:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        text:
          type: string
        phrases:
          type: array
          items:
            type: string

    Phrase:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        text:
          type: string
        isExemplar:
          type: boolean
        attributes:
          type: array
          items:
            type: string

    Concept:
          type: object
          required:
            - id
          properties:
            id:
              type: string
            labels:
              type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic

security:
  - BearerAuth: []
  - BasicAuth: []
