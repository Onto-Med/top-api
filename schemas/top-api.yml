openapi: 3.0.0
info:
  title: TOP API
  version: 0.9.1
  description: |-
    API to manage phenotypes, repositories, ontologies, external terminologies and organisations and to execute phenotypic queries.

    To interact with this API you need a JSON Web Token. You can request one as shown below with a curl example:

    ```sh
    curl \
      -d "client_id=top-frontend" \
      -d "username=<USERNAME>" \
      -d "password=<PASSWORD>" \
      -d "grant_type=password" \
      -X POST "https://top.imise.uni-leipzig.de/auth/realms/top-realm/protocol/openid-connect/token"
    ```
  license:
    name: MIT
    url: 'https://github.com/Onto-Med/top-api/blob/main/LICENSE'
servers:
  - url: 'https://top.imise.uni-leipzig.de/api'
    description: Public demo server.
  - url: 'http://localhost:8080'
    description: Local development instance.
  - url: 'http://host.docker.internal:8080'
    description: In case the server is running on the Docker host.
paths:
  /ping:
    get:
      operationId: ping
      summary: Checks if the server is running.
      responses:
        '200':
          description: Server is up and running.
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - BearerAuth: []
  /statistic:
    summary: Get statistics about available content. Returned data may be cached.
    get:
      operationId: getStatistics
      responses:
        '200':
          description: Object holding statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security:
        - BearerAuth: []
  /document:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getDocuments
      summary: Searches for documents.
      parameters:
        - name: phraseText
          in: query
          description: Filter document by containing phrase.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/conceptcluster/{conceptClusterId}':
    parameters:
      - name: conceptClusterId
        in: path
        required: true
        description: filter documents by the concept cluster ids to which they belong
        schema:
          type: array
          items:
            type: string
    get:
      operationId: getDocumentIdsByConceptClusterIds
      summary: Searches for documents from specific concept clusters. Use the query parameters to filter the result.
      parameters:
        - name: gatheringMode
          in: query
          description: which gathering strategy for the documents regarding their concept cluster to employ (union, exclusive, intersection)
          schema:
            type: string
            default: exclusive
        - name: name
          in: query
          description: Filter documents by name.
          schema:
            type: string
        - name: exemplarOnly
          in: query
          description: only gets documents if they contain phrases that are considered exemplary for the concept cluster
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/phrase/{phraseId}':
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getDocumentsByPhraseIds
      summary: Searches for documents that contain a specific phrase. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter documents by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/DocumentPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  '/document/{documentId}':
    summary: Represents a document
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getDocumentById
      summary: Returns a particular document
      parameters:
        - name: conceptClusterIds
          in: query
          description: highlights the phrases of the selected concepts cluster
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/include'
      responses:
        '200':
          description: Details of the Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - document
  /phrase:
    get:
      operationId: getPhrases
      summary: Searches for phrases
      parameters:
        - name: text
          in: query
          description: Search phrase by text
          schema:
            type: string
        - name: conceptClusterText
          in: query
          description: Search phrase by concept cluster text
          schema:
            type: string
      responses:
        '200':
          description: List of phrases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Phrase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/conceptcluster/{conceptClusterId}':
    parameters:
      - name: conceptClusterId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhrasesByConceptClusterIds
      summary: Searches for phrases that are contained in a specific concept cluster. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phrases by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/PhrasePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/document/{documentId}':
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhrasesByDocumentId
      summary: Searches for phrases that are contained in a specific document. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter phrases by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/PhrasePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  '/phrase/{phraseId}':
    summary: Represents a Phrase
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getPhraseById
      summary: Returns a particular Phrase
      responses:
        '200':
          description: Details of the Phrase
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phrase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - phrase
  /conceptcluster:
    get:
      operationId: getConceptClusters
      summary: Searches for specific concept clusters
      parameters:
        - name: phraseText
          in: query
          description: filter concept cluster by phrase string
          schema:
            type: string
      responses:
        '200':
          description: List of concept clusters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptCluster'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - conceptcluster
  '/conceptcluster/phrase/{phraseId}':
    parameters:
      - name: phraseId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptClustersByPhraseId
      summary: Searches for concept cluster that contain a specific phrase. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter concept cluster by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/ConceptClusterPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - conceptcluster
  '/conceptcluster/document/{documentId}':
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptClustersByDocumentId
      summary: Searches for concept clusters that are contained in a specific document. Use the query parameters to filter the result.
      parameters:
        - name: name
          in: query
          description: Filter concept clusters by name.
          schema:
            type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/ConceptClusterPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - conceptcluster
  '/conceptcluster/{conceptClusterId}':
    summary: Represents a concept cluster
    parameters:
      - name: conceptClusterId
        in: path
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/include'
    get:
      operationId: getConceptClusterById
      summary: Returns a particular concept cluster
      responses:
        '200':
          description: Details of the Concept cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptCluster'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - conceptcluster
  /organisation:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOrganisations
      summary: Search for organisations. Use the query parameters to filter the result.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/OrganisationPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    post:
      operationId: createOrganisation
      summary: Creates a new organisation.
      requestBody:
        description: Organisation details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '201':
          description: Created organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  /data_source:
    get:
      operationId: getDataSources
      summary: Returns all available and accessible data sources.
      parameters:
        - name: queryType
          description: Filter by query type for which data sources can be used.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/QueryType'
      responses:
        '200':
          description: List of data sources.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}':
    summary: Represents an organisation.
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getOrganisationById
      summary: Returns a particular organisation by ID.
      responses:
        '200':
          description: Details of the organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    patch:
      operationId: updateOrganisationById
      summary: Updates a particular organisation by ID and returns the result.
      requestBody:
        description: Organisation details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '200':
          description: Details about the updated organisation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    delete:
      operationId: deleteOrganisationById
      summary: Deletes a particular organisation by ID.
      responses:
        '204':
          description: The organisation was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  /repository:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositories
      summary: Search for repositories. Use the query parameters to filter the result.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/primaryFilter'
        - $ref: '#/components/parameters/repositoryTypeFilter'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/RepositoryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  /entity:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntities
      summary: |
        Search for entities (phenotypes, categories or concepts). Use the query parameters to filter the result.
        Only entities in primary repositories are returned.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/entityTypesFilter'
        - $ref: '#/components/parameters/dataTypeFilter'
        - $ref: '#/components/parameters/itemTypeFilter'
        - $ref: '#/components/parameters/repositoryIdsFilter'
        - name: includePrimary
          in: query
          description: |
            Include all primary repositories in search. You can use this option in conjunction
            with "repositoryIds" query parameter, which will add all primary repositories to the
            list of searched repositories.
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/EntityPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/repository':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositoriesByOrganisationId
      summary: Search for repositories in an organisation. Use the query parameters to filter the result.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/repositoryTypeFilter'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/RepositoryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    post:
      operationId: createRepository
      summary: Creates new repository in organisation.
      requestBody:
        description: Repository details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      responses:
        '201':
          description: Created repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/membership':
    summary: Manage organisation memberships.
    parameters:
      - $ref: '#/components/parameters/organisationId'
    get:
      operationId: getOrganisationMemberships
      summary: Get all memberships of an organisation.
      responses:
        '200':
          description: List of memberships.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationMembership'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    post:
      operationId: createOrganisationMembership
      summary: Create or replace an organisation membership.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '201':
          description: Organisation membership has been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
    delete:
      operationId: deleteOrganisationMembership
      summary: Delete an organisation membership.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '204':
          description: Organisation membership has been deleted.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - organisation
  '/{organisationId}/{repositoryId}':
    summary: Represents a repository in an organisation.
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRepositoryById
      summary: Returns a particular repository in an organisation.
      responses:
        '200':
          description: Details of the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    patch:
      operationId: updateRepositoryById
      summary: Updates a particular repository by ID in the organisation and returns the resulting repository.
      requestBody:
        description: Repository details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      responses:
        '200':
          description: Details about the updated repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
    delete:
      operationId: deleteRepositoryById
      summary: Deletes a particular repository by ID in the organisation.
      responses:
        '204':
          description: The repository was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  /converter:
    get:
      operationId: getConverters
      summary: Query for available entity converters.
      parameters:
        - $ref: '#/components/parameters/converterPurpose'
      responses:
        '200':
          description: List of available converters matching the criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Converter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/export':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/converter'
    get:
      operationId: exportRepository
      summary: Exports a repository with the specified converter.
      responses:
        '200':
          description: Export result.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/{repositoryId}/import':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/converter'
    post:
      operationId: importRepository
      summary: Imports data with the specified converter to a repository.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          description: Import was successful.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - repository
  '/{organisationId}/{repositoryId}/query':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
    get:
      operationId: getQueries
      summary: Returns a list of all queries for the specified repository.
      parameters:
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/QueryPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
    post:
      operationId: enqueueQuery
      summary: |
        Enqueue a new query. You can get the query result with a GET request to the getQueryResult path. The ID property of the provided query object is used as identifier throughout the life-cycle of the query.
      requestBody:
        description: Details of the query to be enqueued.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      responses:
        '201':
          description: The query was enqueued successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}/{repositoryId}/query/{queryId}':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/queryId'
    get:
      operationId: getQueryResult
      summary: Returns the result of a particular query by ID.
      responses:
        '200':
          description: Details of the query result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
    delete:
      operationId: deleteQuery
      summary: Deletes a particular query by ID.
      responses:
        '204':
          description: The query was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}/{repositoryId}/query/{queryId}/download':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/queryId'
    get:
      operationId: downloadQueryResult
      summary: Download the result of a particular query by ID.
      responses:
        '200':
          description: The query result as ZIP file.
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - query
  '/{organisationId}/{repositoryId}/entity':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntitiesByRepositoryId
      summary: Search for phenotypes or categories. Use the query parameters to filter the result.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/entityTypesFilter'
        - $ref: '#/components/parameters/dataTypeFilter'
        - $ref: '#/components/parameters/itemTypeFilter'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/EntityPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    post:
      operationId: createEntity
      summary: Creates a new phenotype or category in a repository and returns the result.
      requestBody:
        description: Phenotype or category details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Details about the created phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/entity/bulk':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/include'
    post:
      operationId: bulkUploadEntities
      summary: Creates multiple new phenotypes or categories in a repository.
      requestBody:
        description: List of phenotypes or categories to be created.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Entity'
      responses:
        '201':
          description: Entities have been created.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/root':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getRootEntitiesByRepositoryId
      summary: Search for root phenotypes or categories. Use the query parameters to filter the result.
      parameters:
        - $ref: '#/components/parameters/nameFilter'
        - $ref: '#/components/parameters/entityTypesFilter'
        - $ref: '#/components/parameters/dataTypeFilter'
        - $ref: '#/components/parameters/itemTypeFilter'
      responses:
        '200':
          description: List of root entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{entityId}':
    summary: Represents an entity (i.e. phenotype or category) in a repository.
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/entityId'
      - $ref: '#/components/parameters/version'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntityById
      summary: Returns a particular phenotype or category in a repository.
      responses:
        '200':
          description: Details of the phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    put:
      operationId: updateEntityById
      summary: Updates a particular phenotype or category by id in a repository and returns the result.
      requestBody:
        description: Phenotype or category details to be applied.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Details about the updated phenotype or category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    delete:
      operationId: deleteEntityById
      summary: Deletes a particular phenotype or category by ID in the repository. One can delete the whole entity or a version by specifying the version parameter. The current version of an entity cannot be deleted.
      requestBody:
        description: 'Options for entity deletion. If this body is missing, default values are applied, as listed here.'
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityDeleteOptions'
      responses:
        '204':
          description: The entity or version was deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    patch:
      operationId: setCurrentEntityVersion
      summary: Reset the state of a particular phenotype or category to the specified version.
      parameters:
        - $ref: '#/components/parameters/version'
      responses:
        '200':
          description: The current version of the entity after performing the reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{entityId}/fork':
    summary: 'Manage forks of an entity. E.g. create new forks, list them and apply updates from origin.'
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/entityId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getForks
      summary: 'Returns all forks of a particular entity and the originating class of the entity, if present.'
      responses:
        '200':
          description: Forking stats that contain a list of forked entities and the originating entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForkingStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
    post:
      operationId: createFork
      summary: |
        Create a new fork from a particular entity. Updates to existing forks can be applied via forking instructions.
      parameters:
        - $ref: '#/components/parameters/version'
      requestBody:
        description: Forking instructions like destination.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForkingInstruction'
      responses:
        '201':
          description: 'List of affected entities (i.e., entities created or updated in the destination repository).'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{entityId}/history':
    summary: Represents the version history of an entity (i.e. phenotype or category) in a repository.
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/entityId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getEntityVersionsById
      summary: Returns all versions of a particular phenotype or category in a repository.
      responses:
        '200':
          description: List of versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{entityId}/move':
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/entityId'
    put:
      operationId: moveEntity
      summary: Update super entites of an entity, also known as moving the entity.
      requestBody:
        description: List of entities that will become the new super entities.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: The resulting entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  '/{organisationId}/{repositoryId}/{entityId}/subclasses':
    summary: 'Represents subclasses (categories, abstract or restricted phenotypes) of an entity in a repository.'
    parameters:
      - $ref: '#/components/parameters/organisationId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/entityId'
      - $ref: '#/components/parameters/include'
    get:
      operationId: getSubclassesById
      summary: Returns all subclasses of a particular phenotype or category in the repository.
      responses:
        '200':
          description: List of subclasses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  /expression_function:
    parameters:
      - name: type
        in: query
        description: |
          Optional parameter to restrict the result set to a specific function type.
        schema:
          type: string
    get:
      operationId: getExpressionFunctions
      summary: Get all supported expression functions.
      responses:
        '200':
          description: List of supported expression functions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpressionFunction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  /expression_constant:
    get:
      operationId: getExpressionConstants
      summary: Get all supported expression constants.
      responses:
        '200':
          description: List of supported expression constants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Constant'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - entity
  /user:
    summary: Represents users that can be members of organisations and have specific permissions.
    get:
      operationId: getUsers
      summary: Search for users by name or organisation membership.
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: organisationIds
          in: query
          description: 'The organisations to filter users for. If you provide an empty array or leave out this parameter, no organisation filter will be applied.'
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/UserPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - user
  '/user/{userId}':
    summary: Manage a specific user.
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getUserById
      summary: Get a user by ID.
      responses:
        '200':
          description: Details of the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - user
  '/code/{codeSystemId}/{uri}':
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getCode
      summary: Retrieve a specific code from an external code system.
      parameters:
        - name: uri
          in: path
          description: 'Code URI, double URL-encoded'
          required: true
          schema:
            type: string
            format: uri
          example: 'http://snomed.info/id/1004019008'
        - name: codeSystemId
          in: path
          description: Identifier of the code system that contains the code.
          required: true
          schema:
            type: string
          example: snomed
      responses:
        '200':
          description: Details of the code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - code
  /code:
    get:
      operationId: getCodes
      summary: Search for codes in external code systems by label.
      parameters:
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/codeLabel'
        - $ref: '#/components/parameters/codeSystemIds'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/CodePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - code
  /code/suggest:
    get:
      operationId: getCodeSuggestions
      summary: Get autosuggestions for codes from external code systems.
      parameters:
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/codeLabel'
        - $ref: '#/components/parameters/codeSystemIds'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/CodePageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - code
  /code_system:
    parameters:
      - $ref: '#/components/parameters/include'
    get:
      operationId: getCodeSystems
      summary: Search for code systems.
      parameters:
        - name: uri
          in: query
          description: Filter code systems by uri
          required: false
          schema:
            type: string
            format: uri
          example: 'http://snomed.info/sct/900000000000207008'
        - name: name
          in: query
          description: Filter code systems by name/id
          required: false
          schema:
            type: string
          example: snomed
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          $ref: '#/components/responses/CodeSystemPageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      tags:
        - code
components:
  parameters:
    codeLabel:
      name: label
      in: query
      description: Filter codes by term labels (including synonyms).
      example: growth
      schema:
        type: string
    codeSystemIds:
      name: codeSystemIds
      in: query
      description: Filter codes by code systems specified by their ids.
      example:
        - snomed
        - loinc
      required: false
      schema:
        type: array
        items:
          type: string
    converter:
      name: converter
      in: query
      description: The converter. You can query available converters via /converter?purpose=import.
      required: true
      schema:
        type: string
    converterPurpose:
      name: purpose
      in: query
      schema:
        $ref: '#/components/schemas/Purpose'
    dataTypeFilter:
      name: dataType
      in: query
      description: Filter by data type.
      schema:
        $ref: '#/components/schemas/DataType'
    entityId:
      name: entityId
      in: path
      required: true
      schema:
        type: string
    entityTypesFilter:
      name: type
      in: query
      description: Filter by entity types.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EntityType'
    include:
      name: include
      description: This field has no purpose jet.
      in: header
      schema:
        type: array
        items:
          type: string
          pattern: ^\w*$
    itemTypeFilter:
      name: itemType
      in: query
      description: Filter by item type.
      schema:
        $ref: '#/components/schemas/ItemType'
    nameFilter:
      name: name
      in: query
      description: Filter by name.
      schema:
        type: string
    ontologyId:
      name: ontologyId
      in: path
      required: true
      schema:
        type: string
    organisationId:
      name: organisationId
      in: path
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: 'The desired page, if the result set is paged.'
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    primaryFilter:
      name: primary
      in: query
      description: Filter by primary state.
      schema:
        type: boolean
    queryId:
      name: queryId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    repositoryId:
      name: repositoryId
      in: path
      required: true
      schema:
        type: string
    repositoryIdsFilter:
      name: repositoryIds
      in: query
      description: Filter by repository IDs.
      schema:
        type: array
        items:
          type: string
    repositoryTypeFilter:
      name: type
      in: query
      description: Filter by repository type.
      schema:
        $ref: '#/components/schemas/RepositoryType'
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    version:
      name: version
      in: query
      description: Defaults to the latest version number.
      schema:
        $ref: '#/components/schemas/VersionNumber'
  schemas:
    Page:
      type: object
      properties:
        number:
          type: integer
          format: int32
          example: 1
        size:
          type: integer
          format: int32
          example: 25
        totalElements:
          type: integer
          format: int64
          example: 1
        totalPages:
          type: integer
          format: int32
          example: 1
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          conceptcluster: '#/components/responses/ConceptClusterPage'
          document: '#/components/responses/DocumentPage'
          entity: '#/components/responses/EntityPage'
          organisation: '#/components/responses/OrganisationPage'
          phrase: '#/components/responses/PhrasePage'
          query: '#/components/responses/QueryPage'
          repository: '#/components/responses/RepositoryPage'
          user: '#/components/responses/UserPage'
      required:
        - number
        - size
        - totalElements
        - totalPages
        - type
    CodePage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Code'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    CodeSystemPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/CodeSystem'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    ConceptClusterPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/ConceptCluster'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    DocumentPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Document'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    EntityPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    OrganisationPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Organisation'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    PhrasePage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Phrase'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    QueryPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Query'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    RepositoryPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/Repository'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    UserPage:
      type: object
      properties:
        content:
          items:
            $ref: '#/components/schemas/User'
          type: array
      allOf:
        - $ref: '#/components/schemas/Page'
      required:
        - content
    Repository:
      type: object
      properties:
        id:
          type: string
          example: example_repository
        name:
          type: string
          example: Example Repository
        description:
          type: string
          example: This is an example repository.
        primary:
          description: Determines whether this repository is a primary (aka. public) repository.
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          example: '2023-04-28T14:48:36.027Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-04-28T15:42:30.035Z'
        organisation:
          $ref: '#/components/schemas/Organisation'
        repositoryType:
          $ref: '#/components/schemas/RepositoryType'
      required:
        - id
    RepositoryType:
      description: |
        The type of a repository. It determines the content a repository can hold.
      type: string
      enum:
        - phenotype_repository
        - concept_repository
    Organisation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        superOrganisation:
          $ref: '#/components/schemas/Organisation'
        permission:
          $ref: '#/components/schemas/Permission'
      example:
        id: example_organisation
        name: Example organisation
        description: This is an example organisation.
        createdAt: '2023-04-28T14:48:36.027Z'
        updatedAt: '2023-04-28T15:42:30.035Z'
        permission: READ
      required:
        - id
    OrganisationMembership:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        organisation:
          $ref: '#/components/schemas/Organisation'
        permission:
          $ref: '#/components/schemas/Permission'
      required:
        - user
        - organisation
    Permission:
      type: string
      enum:
        - READ
        - WRITE
        - MANAGE
    EntityDeleteOptions:
      description: Options to be applied to an entity delete operation.
      type: object
      properties:
        cascade:
          description: Whether sub entities should be deleted to or not. Restrictions are deleted regardless.
          type: boolean
          default: false
    Entity:
      description: Either category, phenotype or concept.
      type: object
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
        id:
          type: string
          example: entity_id
        titles:
          description: There should only be one title per language.
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
          example:
            - lang: en
              text: Example Entity
            - lang: de
              text: Beispiel Entität
            - lang: jp
              text: 例のエンティティ
        synonyms:
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
          example:
            - lang: en
              text: Dummy Entity
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/LocalisableText'
          example:
            - lang: en
              text: Some description of this entity.
        codes:
          description: E.g. LOINC or ICD-10 codes.
          type: array
          items:
            $ref: '#/components/schemas/Code'
        repository:
          $ref: '#/components/schemas/Repository'
        equivalentEntities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
          example: null
      allOf:
        - $ref: '#/components/schemas/VersionedContent'
      discriminator:
        propertyName: entityType
        mapping:
          category: '#/components/schemas/Category'
          single_concept: '#/components/schemas/SingleConcept'
          composite_concept: '#/components/schemas/CompositeConcept'
          single_phenotype: '#/components/schemas/Phenotype'
          composite_phenotype: '#/components/schemas/Phenotype'
          single_restriction: '#/components/schemas/Phenotype'
          composite_restriction: '#/components/schemas/Phenotype'
      required:
        - entityType
    Category:
      type: object
      properties:
        superCategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        subCategories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        phenotypes:
          type: array
          items:
            $ref: '#/components/schemas/Phenotype'
      allOf:
        - $ref: '#/components/schemas/Entity'
    Phenotype:
      type: object
      properties:
        dataType:
          $ref: '#/components/schemas/DataType'
        itemType:
          $ref: '#/components/schemas/ItemType'
        restriction:
          $ref: '#/components/schemas/Restriction'
        expression:
          $ref: '#/components/schemas/Expression'
        unit:
          type: string
          minLength: 1
        superPhenotype:
          $ref: '#/components/schemas/Phenotype'
      allOf:
        - $ref: '#/components/schemas/Category'
    Concept:
      type: object
      properties:
        superConcepts:
          type: array
          items:
            $ref: '#/components/schemas/SingleConcept'
      allOf:
        - $ref: '#/components/schemas/Entity'
    SingleConcept:
      type: object
      properties:
        subConcepts:
          type: array
          items:
            $ref: '#/components/schemas/Concept'
      allOf:
        - $ref: '#/components/schemas/Concept'
    CompositeConcept:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/Expression'
      allOf:
        - $ref: '#/components/schemas/Concept'
      required:
        - expression
    Constant:
      type: object
      properties:
        id:
          description: A unique identifier of the constant.
          type: string
        title:
          description: Human-readable title of the constant.
          type: string
        dataType:
          $ref: '#/components/schemas/DataType'
      example:
        id: today
        title: today
        dataType: date_time
      discriminator:
        propertyName: dataType
        mapping:
          string: '#/components/schemas/StringConstant'
          number: '#/components/schemas/NumberConstant'
          date_time: '#/components/schemas/DateTimeConstant'
          boolean: '#/components/schemas/BooleanConstant'
      required:
        - id
        - dataType
    StringConstant:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: '#/components/schemas/Constant'
    NumberConstant:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: '#/components/schemas/Constant'
    DateTimeConstant:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Constant'
    BooleanConstant:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/Constant'
    Expression:
      type: object
      properties:
        functionId:
          description: ID of a valid expression function. See ExpressionFunction for a detailed description.
          type: string
        type:
          description: |
            Determines the result of a text function. For example: 'initial_term_list', 'processed_term_list'
            Valid values depend on the implementation.
          type: string
        entityId:
          description: 'In case this expression holds an entity, this property contains the id of that entity.'
          type: string
        constantId:
          description: ID of a valid constant. See Constant for a detailed description.
          type: string
        arguments:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
        restriction:
          $ref: '#/components/schemas/Restriction'
    ItemType:
      description: |
        Only relevant for single phenotypes. This property specifies the class of items the phenotype holding this property belongs to.
      type: string
      enum:
        - allergy_intolerance
        - clinical_impression
        - condition
        - encounter
        - medication
        - medication_administration
        - medication_request
        - medication_statement
        - observation
        - procedure
        - subject_age
        - subject_birth_date
        - subject_sex
    User:
      type: object
      properties:
        id:
          type: string
          example: user_1
        username:
          type: string
          example: Example User
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/Organisation'
        role:
          $ref: '#/components/schemas/Role'
      required:
        - id
        - role
    Role:
      type: string
      enum:
        - ADMIN
        - USER
    Value:
      type: object
      properties:
        dataType:
          $ref: '#/components/schemas/DataType'
        dateTime:
          description: |
            This property is for internal use only and will be ignored, if sent to a server.
            The date time of a value specifies when this value has been observed. The observation happened at a specific point in time.
          type: string
          format: x-local-date-time
        startDateTime:
          description: |
            This property is for internal use only and will be ignored, if sent to a server.
            In contrast to values that are observed at a specific point in time, values can also be observed in a time period, with start and end.
            Use property startDateTime in combination with endDateTime to specify the observation period.
          type: string
          format: x-local-date-time
        endDateTime:
          description: |
            This property is for internal use only and will be ignored, if sent to a server.
            In contrast to values that are observed at a specific point in time, values can also be observed in a time period, with start and end.
            Use property startDateTime in combination with endDateTime to specify the observation period.
          type: string
          format: x-local-date-time
        fields:
          description: |
            In case of FHIR, resources may hold many information relevant for calculations.
            This property maps FHIR field identifiers to actual values in the fields.
          type: object
          example:
            dosage.dose:
              dataType: number
              value: 2
          additionalProperties:
            $ref: '#/components/schemas/Value'
      discriminator:
        propertyName: dataType
        mapping:
          string: '#/components/schemas/StringValue'
          number: '#/components/schemas/NumberValue'
          date_time: '#/components/schemas/DateTimeValue'
          boolean: '#/components/schemas/BooleanValue'
      required:
        - dataType
    StringValue:
      type: object
      properties:
        value:
          type: string
      allOf:
        - $ref: '#/components/schemas/Value'
    NumberValue:
      type: object
      properties:
        value:
          type: number
      allOf:
        - $ref: '#/components/schemas/Value'
    DateTimeValue:
      type: object
      properties:
        value:
          type: string
          format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Value'
    BooleanValue:
      type: object
      properties:
        value:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/Value'
    ExpressionFunction:
      type: object
      properties:
        id:
          description: The identifier of the function. Should be unique.
          type: string
          example: add
        title:
          description: Human-readable title of the function.
          type: string
          example: +
        type:
          description: The type of the function. This can be something like a scope in which the function can be used.
          type: string
          example: arithmetic
        notation:
          description: |
            This property defines the preferred notation of a function. If the property is missing or undefined, it should be treated as prefix.
          type: string
          default: prefix
          enum:
            - prefix
            - infix
            - postfix
        minArgumentNumber:
          description: |
            Determines how many arguments are at least required for this function. If this property is missing, the minimum argument number is unrestricted.
          type: integer
          format: int32
        maxArgumentNumber:
          description: |
            Determines how many arguments are allowed for this function at max. If this property is missing, the maximum argument number is unrestricted.
          type: integer
          format: int32
      required:
        - id
    ForkingInstruction:
      type: object
      properties:
        organisationId:
          description: Destination organisation where fork will be created.
          type: string
        repositoryId:
          description: Destination repository where fork will be created.
          type: string
        cascade:
          description: Whether all sub entities shall be forked too.
          type: boolean
          default: false
        update:
          description: Whether existing forks shall be updated to the newest version.
          type: boolean
          default: false
      required:
        - organisationId
        - repositoryId
    ForkingStats:
      type: object
      properties:
        origin:
          $ref: '#/components/schemas/Entity'
        forks:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
    VersionNumber:
      description: Reflects the version of the content. The value is generated server-side.
      type: integer
      format: int32
      minimum: 1
    EntityType:
      type: string
      enum:
        - category
        - single_concept
        - composite_concept
        - single_phenotype
        - composite_phenotype
        - single_restriction
        - composite_restriction
    DataType:
      type: string
      enum:
        - string
        - number
        - boolean
        - date_time
    VersionedContent:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/VersionNumber'
        author:
          type: string
          example: user_1
        createdAt:
          type: string
          format: date-time
        refer:
          type: string
          format: uri
          example: null
    LocalisableText:
      description: A text in a specific language.
      type: object
      properties:
        lang:
          description: ICU Locale code.
          type: string
          pattern: '^[a-z]{2}(-[A-Z\-]+)?$'
        text:
          description: The actual localised text.
          type: string
      required:
        - lang
        - text
    CodeSystem:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: 'https://loinc.org/'
        name:
          type: string
          example: Logical Observation Identifier Names and Codes
        shortName:
          type: string
          example: LOINC
        externalId:
          type: string
          example: loinc
      required:
        - uri
    Code:
      description: |-
        In TOP, a code is considered as one or more codes of a code system (also referred to as taxonomy or ontology).
        Most code systems have a hierarchical structure. The property `includeSubtree` specifies, whether exactly one
        or multiple codes (subtree of codes) are represented by a TOP code.
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: 'https://loinc.org/3137-7'
        codeSystem:
          $ref: '#/components/schemas/CodeSystem'
        code:
          type: string
          example: 3137-7
        includeSubtree:
          description: 'If true, this code represents the corresponding code system code and all of it''s children (subtree).'
          type: boolean
          default: false
        name:
          type: string
          example: Body height
        synonyms:
          type: array
          items:
            type: string
          example:
            - length of the body
            - body size
        highlightLabel:
          description: The highlighted part of an autosuggest query (does not persist - this is only generated on the fly when using /suggest)
          type: string
        highlightSynonym:
          description: The highlighted part of an autosuggest query (does not persist - this is only generated on the fly when using /suggest)
          type: string
      required:
        - codeSystem
        - code
    Restriction:
      description: Represents restriction of an abstract phenotype.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DataType'
        quantifier:
          $ref: '#/components/schemas/Quantifier'
        cardinality:
          description: |
            This value can be used in combination with a quantifier to specify how many matches are required to fulfil this restriction.
          type: integer
          format: int32
          minimum: 0
      discriminator:
        propertyName: type
        mapping:
          string: '#/components/schemas/StringRestriction'
          number: '#/components/schemas/NumberRestriction'
          date_time: '#/components/schemas/DateTimeRestriction'
          boolean: '#/components/schemas/BooleanRestriction'
      required:
        - type
    StringRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      allOf:
        - $ref: '#/components/schemas/Restriction'
    BooleanRestriction:
      type: object
      properties:
        values:
          type: array
          items:
            type: boolean
      allOf:
        - $ref: '#/components/schemas/Restriction'
    NumberRestriction:
      type: object
      properties:
        minOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        maxOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        values:
          description: |
            In case there are operators, the first two values are used as values for these operators. Convention: The first array item will always be treated as minimum and the second one as maximum. In case there is only a maximum value, the first array item is null.
          type: array
          items:
            type: number
      allOf:
        - $ref: '#/components/schemas/Restriction'
    DateTimeRestriction:
      type: object
      properties:
        minOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        maxOperator:
          $ref: '#/components/schemas/RestrictionOperator'
        values:
          description: |
            In case there are operators, the first two values are used as values for these operators. Convention: The first array item will always be treated as minimum and the second one as maximum. In case there is only a maximum value, the first array item is null.
          type: array
          items:
            type: string
            format: x-local-date-time
      allOf:
        - $ref: '#/components/schemas/Restriction'
    RestrictionOperator:
      type: string
      enum:
        - <
        - <=
        - '>'
        - '>='
    Quantifier:
      type: string
      enum:
        - all
        - exact
        - min
        - max
    QueryType:
      type: string
      enum:
        - phenotype
        - concept
    Query:
      description: A Query can be used to search for arbitrary data in external data sources.
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/QueryType'
        name:
          description: |
            Name of this query. For example, you could allow users to save a query for later use and use the name as identifier.
          type: string
          example: Example Query
        dataSource:
          description: A data source ID.
          type: string
          example: example_data_source
      discriminator:
        propertyName: type
        mapping:
          phenotype: '#/components/schemas/PhenotypeQuery'
          concept: '#/components/schemas/ConceptQuery'
      required:
        - id
        - type
        - dataSource
    PhenotypeQuery:
      description: |
        Represents a phenotypic search query for subjects/individuals.
        A phenotype query has in/exclusions and projections.
      type: object
      properties:
        criteria:
          description: List of in- and exclusion criteria.
          type: array
          items:
            $ref: '#/components/schemas/QueryCriterion'
        projection:
          description: |
            The projection to be performed on the result set. This property holds an ordered list of subjects with sorting directions.
          type: array
          items:
            $ref: '#/components/schemas/ProjectionEntry'
        dependentSubjects:
          $ref: '#/components/schemas/DependentSubjectsMap'
      allOf:
        - $ref: '#/components/schemas/Query'
    ConceptQuery:
      description: |
        Represents a concept search query.
        A concept query references exactly one entity and specifies a language to search for.
      type: object
      properties:
        entityId:
          description: The ID of the entity this query is performed with.
          type: string
        dateTimeRestriction:
          $ref: '#/components/schemas/DateTimeRestriction'
        language:
          type: string
      allOf:
        - $ref: '#/components/schemas/Query'
      required:
        - entityId
    QueryResult:
      description: Result of a query. It might indicate that the query has not finished yet or has failed.
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        count:
          description: Total count of entries in the query result.
          type: integer
          format: int64
          example: 2746
        finishedAt:
          type: string
          format: date-time
        message:
          description: Optional message about the query or query result. (e.g. error message)
          type: string
          example: Query finished successfully.
        state:
          $ref: '#/components/schemas/QueryState'
      required:
        - id
        - createdAt
    QueryState:
      type: string
      example: finished
      enum:
        - failed
        - finished
        - queued
        - running
    DependentSubjectsMap:
      description: 'Map of additional subjects that hold information, required to execute the query.'
      type: object
      properties:
        id:
          description: ID of the dependent subject.
          type: string
      example: null
      additionalProperties:
        $ref: '#/components/schemas/Entity'
      required:
        - id
    DataSource:
      description: A data source is a data storage (e.g. database) on which queries can be executed.
      type: object
      properties:
        id:
          description: ID of the data source.
          type: string
          example: example_data_source
        title:
          description: Human-readable title of the data source.
          type: string
          example: Example Data Source
      required:
        - id
    ProjectionEntry:
      description: Single entry of a projection select list.
      type: object
      properties:
        subjectId:
          description: ID of a subject this projection entry refers to.
          type: string
          example: example_entity
        defaultAggregationFunctionId:
          description: |
            Multiple phenotype values in expressions must be aggregated to a single value in order to use them for calculations.
            The aggregation function provided via this property will be used as default aggregation function for cases where none has been set.
          type: string
          example: Last
        dateTimeRestriction:
          $ref: '#/components/schemas/DateTimeRestriction'
        type:
          type: string
          enum:
            - ProjectionEntry
            - QueryCriterion
      discriminator:
        propertyName: type
      required:
        - subjectId
        - type
    QueryCriterion:
      description: A single criterion of a search query. Criteria can be inclusions or exclusions.
      type: object
      properties:
        inclusion:
          type: boolean
          default: true
      allOf:
        - $ref: '#/components/schemas/ProjectionEntry'
      required:
        - inclusion
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
    Statistic:
      description: Holds statistics about content. The scope may be a subset of content stored on the server. Statistics may vary depending on user permissions.
      type: object
      properties:
        organisations:
          description: Number of organisations.
          type: integer
          format: int64
        repositories:
          description: Number of repositories.
          type: integer
          format: int64
        categories:
          description: Number of phenotype categories.
          type: integer
          format: int64
        phenotypes:
          description: Number of phenotypes.
          type: integer
          format: int64
        documents:
          description: Number of documents
          type: integer
          format: int64
    Document:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        name:
          type: string
        highlightedText:
          type: string
    Phrase:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        isExemplar:
          type: boolean
        attributes:
          type: array
          items:
            type: string
      required:
        - id
    ConceptCluster:
      type: object
      properties:
        id:
          type: string
        labels:
          type: string
      required:
        - id
    Purpose:
      type: string
      enum:
        - export
        - import
    Converter:
      type: object
      properties:
        id:
          type: string
          example: Phenotype2Dmn
        purpose:
          $ref: '#/components/schemas/Purpose'
        fileExtension:
          type: string
          example: dmn
      required:
        - id
        - purpose
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 404
            message: Not found
    Unauthorized:
      description: 'Unauthorized, Access token is missing or invalid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 401
            message: Unauthorized
    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 500
            message: Unexpected error
    CodePageResponse:
      description: A page of codes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CodePage'
    CodeSystemPageResponse:
      description: A page of code systems.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CodeSystemPage'
    ConceptClusterPageResponse:
      description: A page of concept cluster.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConceptClusterPage'
    DocumentPageResponse:
      description: A page of documents.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentPage'
    EntityPageResponse:
      description: A page of entities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityPage'
    OrganisationPageResponse:
      description: A page of organisations.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganisationPage'
    PhrasePageResponse:
      description: A page of phrases.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PhrasePage'
    QueryPageResponse:
      description: A page of queries.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryPage'
    RepositoryPageResponse:
      description: A page of repositories.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RepositoryPage'
    UserPageResponse:
      description: A page of users.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPage'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: default
    description: Collection of various unrelated content
  - name: organisation
    description: Organisations are used to organise content of the TOP Framework
  - name: user
    description: Users can be members of organisations and can receive permissions
  - name: repository
    description: Repositories can hold entities and are part of an organisation
  - name: entity
    description: Generic content type that is included in repositories
  - name: query
    description: Everything about queries and query execution
    externalDocs:
      description: Find out more about queries
      url: 'https://github.com/Onto-Med/top-phenotypic-query'
  - name: document
    description: Everything about documents
  - name: phrase
    description: Phrases are contained in specific documents and belong to concept clusters
  - name: conceptcluster
    description: Concept clusters are abstract representations of similar phrases
security:
  - BearerAuth: []
