openapi: 3.0.0
info:
  title: TOP API
  version: 0.1.14
  description: API to manage phenotypes, repositories, ontologies and organisations

servers:
  - url: http://localhost:8080
  - url: http://host.docker.internal:8080
    description: In case the server is running on the Docker host

paths:
  /metadata:
    get:
      summary: OpenAPI description of this API
      operationId: getMetadata
      security:
        - BearerAuth: []
        - BasicAuth: []
      responses:
        200:
          description: API metadata
          content:
            text/plain:
              schema:
                type: string

  /ping:
    get:
      summary: Checks if the server is running
      operationId: ping
      security:
        - BearerAuth: []
        - BasicAuth: []
      responses:
        200:
          description: Server is up and running
        default:
          $ref: "#/components/responses/UnexpectedError"

  /authentication_token:
    post:
      summary: Get JWT token
      operationId: getAuthenticationToken
      security:
        - BearerAuth: []
        - BasicAuth: []
      requestBody:
        description: Login data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        200:
          description: Generated JWT token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationToken"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /user_account:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for user accounts. Use the query parameters to filter the result.
      operationId: getUserAccounts
      tags:
        - userAccount
      parameters:
        - name: username
          description: Filter user accounts by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of user accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserAccount"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new user account and returns the result
      operationId: createUserAccount
      tags:
        - userAccount
      requestBody:
        description: User account details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAccount"
      responses:
        201:
          description: Created user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccount"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /user_account/{userAccountId}:
    summary: Represents a user account
    parameters:
      - name: userAccountId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular user account
      operationId: getUserAccountByUserAccountId
      tags:
        - userAccount
      responses:
        200:
          description: Details about a user account by ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccount"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Updates a particular user account by ID and returns the resulting user account
      operationId: updateUserAccountByUserAccountId
      tags:
        - userAccount
      requestBody:
        description: User account details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAccount"
      responses:
        200:
          description: Details about the updated user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccount"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular user account by ID and returns the deleted user account
      operationId: deleteUserAccountByUserAccountId
      tags:
        - userAccount
      responses:
        204:
          description: User account was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /organisation:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for organisations. Use the query parameters to filter the result.
      operationId: getOrganisations
      tags:
        - organisation
      parameters:
        - name: name
          description: Filter organisations by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new organisation
      operationId: createOrganisation
      tags:
        - organisation
      requestBody:
        description: Organisation details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        201:
          description: Created organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}:
    summary: Represents an organisation
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular organisation
      operationId: getOrganisationById
      tags:
        - organisation
      responses:
        200:
          description: Details of the organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Updates a particular organisation by id and returns the result
      operationId: updateOrganisationById
      tags:
        - organisation
      requestBody:
        description: Organisation details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
      responses:
        200:
          description: Details about the updated organisation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisation"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular organisation by id and returns the deleted organisation
      operationId: deleteOrganisationById
      tags:
        - organisation
      responses:
        204:
          description: The organisation was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /repository:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for repositories. Use the query parameters to filter the result.
      operationId: getRepositories
      tags:
        - repository
      parameters:
        - name: name
          description: Filter repositories by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /ontology:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for ontologies. Use the query parameters to filter the result.
      operationId: getOntologies
      tags:
        - ontology
      parameters:
        - name: name
          description: Filter ontologies by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of ontologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /entity:
    parameters:
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phenotypes or categories. Use the query parameters to filter the result.
      operationId: getEntities
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/repository:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for repositories in organisation. Use the query parameters to filter the result.
      operationId: getRepositoriesByOrganisationId
      tags:
        - repository
      parameters:
        - name: name
          description: Filter repositories by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of repositories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new repository in organisation
      operationId: createRepository
      tags:
        - repository
      requestBody:
        description: Repository details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Repository"
      responses:
        201:
          description: Created repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}:
    summary: Represents a repository in an organisation
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular repository in organisation
      operationId: getRepositoryById
      tags:
        - repository
      responses:
        200:
          description: Details of the repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Updates a particular repository by id in the organisation and returns the resulting repository
      operationId: updateRepositoryById
      tags:
        - repository
      requestBody:
        description: Repository details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Repository"
      responses:
        200:
          description: Details about the updated repository
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      summary: Deletes a particular repository by id in the organisation and returns the deleted repository
      operationId: deleteRepositoryById
      tags:
        - repository
      parameters:
        - name: repositoryId
          in: path
          required: true
          schema:
            type: string
        - name: organisationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: The repository was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/ontology:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for ontologies in repository. Use the query parameters to filter the result.
      operationId: getOntologiesByRepositoryId
      tags:
        - ontology
      parameters:
        - name: name
          description: Filter ontologies by name.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of ontologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates new ontology in repository
      operationId: createOntology
      tags:
        - ontology
      requestBody:
        description: Ontology details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ontology"
      responses:
        201:
          description: Created ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/ontology/{ontologyId}/{version}:
    summary: Represents an ontology in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: ontologyId
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/VersionNumber"
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular ontology in the repository
      operationId: getOntologyByName
      tags:
        - ontology
      responses:
        200:
          description: Details of the ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: Updates a particular ontology by id in the repository and returns the result
      operationId: updateOntologyById
      tags:
        - ontology
      requestBody:
        description: Ontology details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ontology"
      responses:
        200:
          description: Details about the updated ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    patch:
      summary: Build a new release for the ontology
      operationId: releaseOntology
      tags:
        - ontology
      responses:
        200:
          description: Details about the released ontology
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ontology"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Deletes a particular ontology by id in the repository and returns the deleted ontology
      operationId: deleteOntologyById
      tags:
        - ontology
      responses:
        204:
          description: The ontology was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/entity:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for phenotypes or categories. Use the query parameters to filter the result.
      operationId: getEntitiesByRepositoryId
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter phenotypes or categories by type.
          in: query
          schema:
            $ref: "#/components/schemas/EntityType"
        - name: dataType
          description: Filter phenotypes or categories by data type
          in: query
          schema:
            $ref: "#/components/schemas/DataType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    post:
      summary: Creates a new phenotype or category in the repository and returns the result
      operationId: createEntity
      tags:
        - entity
      requestBody:
        description: Phenotype or category details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        200:
          description: Details about the created phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/root:
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Searches for root phenotypes or categories. Use the query parameters to filter the result.
      operationId: getRootEntitiesByRepositoryId
      tags:
        - entity
      parameters:
        - name: name
          description: Filter phenotypes or categories by name.
          in: query
          schema:
            type: string
        - name: type
          description: Filter phenotypes or categories by type.
          in: query
          schema:
            $ref: "#/components/schemas/EntityType"
        - name: dataType
          description: Filter phenotypes or categories by data type
          in: query
          schema:
            $ref: "#/components/schemas/DataType"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: List of root phenotypes or categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}:
    summary: Represents an entity (i.e. phenotype or category) in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: version
        description: Defaults to the latest version number.
        in: query
        schema:
          $ref: "#/components/schemas/VersionNumber"
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns a particular phenotype or category in the repository
      operationId: getEntityById
      tags:
        - entity
      responses:
        200:
          description: Details of the phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    put:
      summary: Updates a particular phenotype or category by id in the repository and returns the result
      operationId: updateEntityById
      tags:
        - entity
      requestBody:
        description: Phenotype or category details to be applied
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        200:
          description: Details about the updated phenotype or category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"
    delete:
      parameters:
        - name: permanent
          in: query
          description: Whether the entity version shall be deleted permanently.
          schema:
            type: boolean
            default: false
      summary:
        Deletes a particular phenotype or category by id in the repository and returns the deleted phenotype or category.
        The Entity is not actually deleted, but set to invisible.
      operationId: deleteEntityById
      tags:
        - entity
      responses:
        204:
          description: The entity was deleted successfully.
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/history:
    summary: Represents the version history of an entity (i.e. phenotype or category) in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns all versions of a particular phenotype or category in the repository
      operationId: getEntityVersionsById
      tags:
        - entity
      responses:
        200:
          description: List of versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /{organisationId}/{repositoryId}/{id}/subclasses:
    summary: Represents subclasses (categories, abstract or restricted phenotypes) of an entity in a repository
    parameters:
      - name: organisationId
        in: path
        required: true
        schema:
          type: string
      - name: repositoryId
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/include"
    get:
      summary: Returns all sublcasses of a particular phenotype or category in the repository
      operationId: getSubclassesById
      tags:
        - entity
      responses:
        200:
          description: List of subclasses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /code_system:
    get:
      summary: Searches for code systems
      operationId: getCodeSystems
      tags:
        - code_system
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: uri
          in: query
          schema:
            type: string
            format: uri
      responses:
        200:
          description: List of matching code systems
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CodeSystem"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

  /code:
    get:
      summary: Searches for codes
      operationId: getCodes
      tags:
        - code
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: code
          in: query
          schema:
            type: string
        - name: codeSystemName
          in: query
          schema:
            type: string
        - name: codeSystemUri
          in: query
          schema:
            type: string
            format: uri
      responses:
        200:
          description: List of matching codes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Code"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/UnexpectedError"

components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: Unauthorized, Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  parameters:
    page:
      name: page
      in: query
      description: The desired page, if the resultset is paged.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1

    include:
      name: include
      description: This field has no purpose jet.
      in: header
      schema:
        type: array
        items:
          type: string
          pattern: '^\w*$'

  schemas:
    UserAccount:
      type: object
      required:
        - username
        - email
      properties:
        userAccountId:
          type: integer
          format: int32
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        isAdmin:
          description: Whether the user account is an administrator
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time

    Repository:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        organisation:
          $ref: "#/components/schemas/Organisation"

    Ontology:
      allOf:
        - $ref: "#/components/schemas/VersionedContent"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            repository:
              $ref: "#/components/schemas/Repository"
            organisation:
              $ref: "#/components/schemas/Organisation"

    Organisation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        superOrganisation:
          $ref: "#/components/schemas/Organisation"

    Entity:
      description: Either category or phenotype
      allOf:
        - $ref: "#/components/schemas/VersionedContent"
        - type: object
          required:
            - entityType
          properties:
            entityType:
              $ref: "#/components/schemas/EntityType"
            id:
              type: string
            titles:
              type: array
              description: There should only be one title per language
              items:
                $ref: "#/components/schemas/LocalisableText"
            synonyms:
              type: array
              items:
                $ref: "#/components/schemas/LocalisableText"
            descriptions:
              type: array
              items:
                $ref: "#/components/schemas/LocalisableText"
            index:
              type: integer
              format: int32
              minimum: 1
            codes:
              type: array
              items:
                $ref: "#/components/schemas/Code"
            repository:
              $ref: "#/components/schemas/Repository"
            equivalentEntities:
              type: array
              items:
                $ref: "#/components/schemas/Entity"
      discriminator:
        propertyName: entityType
        mapping:
          category: "#/components/schemas/Category"
          phenotype_group: "#/components/schemas/PhenotypeGroup"
          single_phenotype: "#/components/schemas/Phenotype"
          combined_phenotype: "#/components/schemas/Phenotype"
          derived_phenotype: "#/components/schemas/Phenotype"
          single_restriction: "#/components/schemas/Phenotype"
          combined_restriction: "#/components/schemas/Phenotype"
          derived_restriction: "#/components/schemas/Phenotype"

    Category:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
          properties:
            superCategories:
              type: array
              items:
                $ref: "#/components/schemas/Category"

    PhenotypeGroup:
      allOf:
        - $ref: "#/components/schemas/Category"
        - type: object
          properties:
            phenotypes:
              type: array
              items:
                $ref: "#/components/schemas/Phenotype"

    Phenotype:
      allOf:
        - $ref: "#/components/schemas/Category"
        - type: object
          properties:
            dataType:
              $ref: "#/components/schemas/DataType"
            formula:
              $ref: "#/components/schemas/Formula"
            restriction:
              $ref: "#/components/schemas/Restriction"
            expression:
              $ref: "#/components/schemas/Expression"
            units:
              type: array
              items:
                $ref: "#/components/schemas/Unit"
            score:
              type: number
            superPhenotype:
              $ref: "#/components/schemas/Phenotype"
            phenotypeGroups:
              type: array
              items:
                $ref: "#/components/schemas/PhenotypeGroup"

    Unit:
      type: object
      properties:
        preferred:
          type: boolean
          default: false
          description: If there are multiple preferred units, the first one will be used
        unit:
          type: string
          minLength: 1

    Expression:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ExpressionType"
        id:
          type: string
          description: If type equals class or restriction, this property contains the id of that class or restriction
        operands:
          type: array
          items:
            $ref: "#/components/schemas/Expression"

    ExpressionType:
      type: string
      enum:
        - union
        - intersection
        - complement
        - class
        - restriction

    Formula:
      type: object
      properties:
        operator:
          $ref: "#/components/schemas/FormulaOperator"
        id:
          type: string
          description: If operator equals class or restriction, this property contains the id of that class or restriction.
        operands:
          type: array
          items:
            $ref: "#/components/schemas/Formula"

    FormulaOperator:
      type: string
      enum: [add, substract, multiply, divide, if_else, class, restriction]

    VersionNumber:
      description: Reflects the version of the content. The value is generated server-side.
      type: integer
      format: int32
      minimum: 0

    EntityType:
      type: string
      enum:
        - category
        - phenotype_group
        - single_phenotype
        - combined_phenotype
        - derived_phenotype
        - single_restriction
        - combined_restriction
        - derived_restriction

    DataType:
      type: string
      enum: [string, number, boolean, date_time]

    VersionedContent:
      type: object
      properties:
        version:
          $ref: "#/components/schemas/VersionNumber"
        author:
          $ref: "#/components/schemas/UserAccount"
        createdAt:
          type: string
          format: date-time
        hiddenAt:
          type: string
          format: date-time
        refer:
          type: string
          format: uri

    LocalisableText:
      description: A text in a specific language
      type: object
      required:
        - lang
        - text
      properties:
        lang:
          description: ICU Locale code
          type: string
          pattern: '^[a-z]{2}(-[A-Z\-]+)?$'
        text:
          description: The actual localised text
          type: string

    CodeSystem:
      type: object
      required:
        - uri
        - name
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string

    Code:
      description: Code of a code system
      type: object
      required:
        - codeSystem
        - code
      properties:
        codeSystem:
          $ref: "#/components/schemas/CodeSystem"
        code:
          type: string
        name:
          type: string

    Restriction:
      description: Represents restriction of an abstract phenotype
      type: object
      required:
        - type
      properties:
        type:
          $ref:  "#/components/schemas/DataType"
        negated:
          type: boolean
          default: false
        quantor:
          $ref: "#/components/schemas/Quantor"
      discriminator:
        propertyName: type
        mapping:
          string: "#/components/schemas/StringRestriction"
          number: "#/components/schemas/NumberRestriction"
          date_time: "#/components/schemas/DateTimeRestriction"
          boolean: "#/components/schemas/BooleanRestriction"

    StringRestriction:
      allOf:
        - $ref: "#/components/schemas/Restriction"
        - type: object
          properties:
            values:
              type: array
              items:
                type: string

    BooleanRestriction:
      allOf:
        - $ref: "#/components/schemas/Restriction"
        - type: object
          properties:
            values:
              type: array
              items:
                type: boolean

    NumberRestriction:
      allOf:
        - $ref: "#/components/schemas/Restriction"
        - type: object
          properties:
            minOperator:
              $ref: "#/components/schemas/RestrictionOperator"
            maxOperator:
              $ref: "#/components/schemas/RestrictionOperator"
            values:
              type: array
              description: In case there are operators, the first two values are used as values for those operators
              items:
                type: number

    DateTimeRestriction:
      allOf:
        - $ref: "#/components/schemas/Restriction"
        - type: object
          properties:
            minOperator:
              $ref: "#/components/schemas/RestrictionOperator"
            maxOperator:
              $ref: "#/components/schemas/RestrictionOperator"
            values:
              type: array
              description: In case there are operators, the first two values are used as values for those operators
              items:
                type: string
                format: date-time

    RestrictionOperator:
      type: string
      enum: ["<", "<=", ">", ">="]

    Quantor:
      type: string
      enum: ["none", "exists", "some", "all"]

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    AuthenticationToken:
      type: object
      required:
        - token
      properties:
        token:
          description: The JWT token
          type: string
          readOnly: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic

security:
  - BearerAuth: []
  - BasicAuth: []
